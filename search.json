[
  {
    "objectID": "setup/install_fest.html",
    "href": "setup/install_fest.html",
    "title": "Installation ‘Fest’",
    "section": "",
    "text": "This page is intended to get you up and running with most of the programming tools that you’ll need for the year during Induction Week. This way, you are ready to begin your studies in Week 1.",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#base-utilities",
    "href": "setup/install_fest.html#base-utilities",
    "title": "Installation ‘Fest’",
    "section": "Base Utilities",
    "text": "Base Utilities\n\nMacOSWindows\n\n\nYou need the Xcode Command Line Tools installed on your Mac. In some cases this may have already been installed, but it’s the same process to check as to install:\n\nOpen the Terminal application (which can be found under Utilities in your Applications folder).\nType the following: xcode-select --install and then hit Enter (⏎)\n\nUnless you get an outright error you can proceed to the next step:\n\nAlthough not strictly necessary, you’ll eventually want the Homebrew package manager, which can also be installed directly from the Terminal.\n\n\n\nYou will need to install WSL2 but, strangely, you do not actually need to install a full Linux O/S, so as far as we can tell this means you only need to run the following commands in the Windows PowerShell:\n\nwsl --install should quickly install the subsystem that we need.\nwsl --update will ensure that the most up-to-date version is available.\n\nThat should be it: Docker should now run without complaint.\n\n\n\n\n\n\nIf You Need More Help\n\n\n\n\nThere is good guidance from Microsoft for Windows 11 and more recent ‘builds’ of Windows 10.\nThere are also older instructions for Windows 10.\n\nCommon installation errors are covered here.\nFinally, if you are still being told that you can’t install WSL2 and Linux, then the most likely cause of this issue is a setting in the BIOS of the computer itself. There are a couple of settings that need changing at a very low level to enable Hyper-V virtualisation. I would start by following this MS guide and, if there is still a problem, check this blog post.",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#downloading",
    "href": "setup/install_fest.html#downloading",
    "title": "Installation ‘Fest’",
    "section": "Downloading",
    "text": "Downloading\n\nWhat Kind of Computer?\n\nApple Intel or Silicon/M-chip?\nApple has stopped using Intel computer chips and now uses its own ‘Silicon’ (aka ‘M’) chips instead. Confusingly, these are often also referred to by their technical specification as AMD64 (Intel) and ARM64 (Apple), respectively. To find out which you have, click on the Apple icon () and select About this Mac. Look at the Processor section and you should see which type of computer you have. If you see the word Intel then you have an Intel computer, if you see M1, M2, M3, etc. then you have an Apple Silicon computer.\n\n\nWindows 32- or 64-bit?\nIt is highly unlikely that you have a 32-bit machine, so if in doubt download the 64-bit version. It is also unlikely that you have an ARM device if you have an off-the-shelf Windows computer.\nWhile you’re waiting for the packages below to finish downloading, you can also have a look at the information about getting set up on GitHub…\nPlease download all of the Essential packages for your type of computer (Apple Intel, Apple Silicon, Windows). The rest are listed for your convenience and you can install them as you see fit.\n\nApple IntelApple Silicon (M-chips)Windows PCs\n\n\n\nEssential:\n\nDocker Desktop for Mac with Intel chip\nR-4.4.1 for x86-64/AMD64\nR Studio Desktop\n\nGood to have:\n\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\nCompletely optional:\n\nVS Code (Universal)\nQuarto\niTerm2\n\n\n\n\n\nEssential:\n\nDocker Desktop for Mac with Apple silicon\nR-4.4.1 for ARM64\nR Studio Desktop\n\nGood to have:\n\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\nCompletely optional:\n\nVS Code (ARM64)\nQuarto\niTerm2\n\n\n\n\n\nEssential:\n\nDocker Desktop for Windows\nR-4.4.1\nR Studio Desktop\nGit\n\nGood to have:\n\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\nCompletely optional:\n\nVS Code\nQuarto",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#next-steps",
    "href": "setup/install_fest.html#next-steps",
    "title": "Installation ‘Fest’",
    "section": "Next Steps",
    "text": "Next Steps\nR and R-Studio can be installed fairly easily by double-clicking on the downloaded files and following the instructions. Docker is a bit more complex, so please follow the instructions below.",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#installing-docker",
    "href": "setup/install_fest.html#installing-docker",
    "title": "Installation ‘Fest’",
    "section": "Installing Docker",
    "text": "Installing Docker\n\n\n\n\n\n\nEssential Topic\n\n\n\nThis next section is essential to running the sds2024 environment.\n\n\nDocker is a complex application doing very complex things. It’s not surprising that it can be a bit of a pain to install. But once installed, it’s a very powerful platform for ‘doing (spatial) data science’ that’s widely used in industry and, increasingly, academia.\nOne way to think of it as a ‘library’ of ready-made virtual computers that you can copy and use free-of-charge. If you’d like to know more about what Docker is and how it works, you can read more in the Understanding Docker section.\n\n\n\n\n\n\nWindows Users\n\n\n\nPlease ensure that you have installed WSL2 before installing Docker! If you cannot install WSL2 then please have a look at the ‘dealing with errors’ section.\n\n\nAfter you’ve downloaded Docker, you need to:\n\nInstall it – usually this will mean opening the image and either dragging it your Application folder (Mac) or running the installer (Windows)\nStart it up – double-click the Docker icon in your Applications folder to start Docker running.\nFinish setup – once Docker is finished starting up, you should see the login screen below. You do not need to create an account (notice Continue without signing in)\nOn all the subsequent questions you can Skip (upper-right corner) answering as well.\n\n\n\n\nDocker trying to trick you into creating an account\n\n\nYou must finish setting up before proceeding to the next step. You’ll know that you’re ready to move on when you see the ‘Docker Desktop’ window appear listing ‘downloaded images’ and ‘running containers’:\n\n\n\nDocker Desktop\n\n\nIf you didn’t see this then you will need to have a look at the ‘dealing with errors’ section.",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#testing-docker",
    "href": "setup/install_fest.html#testing-docker",
    "title": "Installation ‘Fest’",
    "section": "Testing Docker",
    "text": "Testing Docker\nTo test if Docker is installed correctly, you will need either the Terminal (macOS) or the Power Shell (Windows).\n\n\n\n\n\n\nCopy Code to Clipboard\n\n\n\nWhenever you see a ‘code block’ below, you will also see a ‘clipboard’ icon () in the right. Click that, and the code will be copied to your computer’s ‘clipboard’ so that you can then paste it into the Terminal or Power Shell. That will save you a lot of time and effort.\n\n\nDocker has provided a simple way to test if your installation is working correctly. You can run the following command in the Terminal or Power Shell:\ndocker run hello-world\nThis should output something like:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n478afc919002: Pull complete\nDigest: sha256:91fb4b041da273d5a3273b6d587d62d518300a6ad268b28628f74997b93171b2\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (arm64v8)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\nIf you see this message, then Docker is installed correctly and you can move on to the next step. If you see an error message, then you will need to have a look at the ‘dealing with errors’ section. Notice how there are several things happening:\n\nUnable to find image... locally – this is because the hello-world image is not (yet) stored on your computer.\nlatest: Pulling from library/hello-world – this is Docker downloading the hello-world image from the internet.\nPull complete – this is Docker telling you that it has finished downloading the image.\nHello from Docker! – this is the hello-world image running and telling you that Docker is working correctly.\n\nThere’s obviously a lot more to that message, but that’s the basic idea.",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#installing",
    "href": "setup/install_fest.html#installing",
    "title": "Installation ‘Fest’",
    "section": "Installing sds2024",
    "text": "Installing sds2024\nWe now need to download the sds2024 image that we use for teaching Foundations and Quantitative Methods. The image is the ‘template’ for running virtual machines (i.e. computers) on our ‘host’ computer and it comes complete with all of the Python libraries and other tools that you’ll need to complete the module (and a good deal more besides!). Installing the image will take a while as it’s quite large (2-5GB) and so will depend on the speed of your internet connection.\n\nIntel Macs and WindowsSilicon/M-Chip Macs\n\n\nIf your Apple computer has an Intel chipset (see:  -&gt; About this Mac -&gt; Processor) or is running Windows:\ndocker pull jreades/sds:2024\n\n\nIf your Apple computer has an M1 or M2 ‘Silicon’ chipset (see:  -&gt; About this Mac -&gt; Processor):\ndocker pull jreades/sds:2024-silicon",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#using",
    "href": "setup/install_fest.html#using",
    "title": "Installation ‘Fest’",
    "section": "Using sds2024",
    "text": "Using sds2024\nNow that you have the image downloaded, you can start an sds2024 container by copying the following command into the Terminal or Power Shell (this does not work in the Command Prompt/cmd):\n\nFor Intel MacsFor M-Chip MacsFor Windows\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sds:2024 start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sds:2024-silicon start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 -v \"$(pwd):/home/jovyan/work\" jreades/sds:2024 start.sh jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#success",
    "href": "setup/install_fest.html#success",
    "title": "Installation ‘Fest’",
    "section": "Success!",
    "text": "Success!\nHowever, most of you should now be able to connect to the virtual machine by pointing your browser at: localhost:8888 where you should see something like this:\n\n\n\nJupyter Lab Success",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#dealing-with-errors",
    "href": "setup/install_fest.html#dealing-with-errors",
    "title": "Installation ‘Fest’",
    "section": "Dealing with Errors",
    "text": "Dealing with Errors\nIf you encounter any problems with the installation, please have a look at the Dealing with Errors section.",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/install_fest.html#get-a-github-account",
    "href": "setup/install_fest.html#get-a-github-account",
    "title": "Installation ‘Fest’",
    "section": "Get a GitHub Account",
    "text": "Get a GitHub Account\nYou will need to go to GitHub.com and then click the Sign up button at the top right. Follow the instructions for creating a new account from there.\n\n\n\n\n\n\nUse Your Personal Account\n\n\n\nAlthough you can always change it later (so if you’ve opened your GitHub account using your UCL email don’t panic!), you may find it easier to:\n\nOpen a GitHub account using a personal email address to which you expect to always have access.\nThen associate your UCL email address to this GitHub account so that you gain from any educational benefits offered by GitHub (there are some around private respositories and so on).",
    "crumbs": [
      "Installation 'Fest'"
    ]
  },
  {
    "objectID": "setup/env.html",
    "href": "setup/env.html",
    "title": "Programming Environment",
    "section": "",
    "text": "Over the years, we have experimented with a range of approaches to setting you up with a programming environment, and we have come to the conclusion that Docker1 is the most robust way to ensure a consistent experience. This guarantees that all students end up with the same versions of each library, that difficult-to-diagnose hardware/OS issues are minimised, and that running/recovery is the most straightforward.",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#downloading",
    "href": "setup/env.html#downloading",
    "title": "Programming Environment",
    "section": "Downloading",
    "text": "Downloading\n\nWhat Kind of Computer?\n\nApple Intel or Silicon/M-chip?\nApple has stopped using Intel computer chips and now uses its own ‘Silicon’ (aka ‘M’) chips instead. Confusingly, these are often also referred to by their technical specification as AMD64 (Intel) and ARM64 (Apple), respectively. To find out which you have, click on the Apple icon () and select About this Mac. Look at the Processor section and you should see which type of computer you have. If you see the word Intel then you have an Intel computer, if you see M1, M2, M3, etc. then you have an Apple Silicon computer.\n\n\nWindows 32- or 64-bit?\nIt is highly unlikely that you have a 32-bit machine, so if in doubt download the 64-bit version. It is also unlikely that you have an ARM device if you have an off-the-shelf Windows computer.\nWhile you’re waiting for the packages below to finish downloading, you can also have a look at the information about getting set up on GitHub…\nPlease download all of the Essential packages for your type of computer (Apple Intel, Apple Silicon, Windows). The rest are listed for your convenience and you can install them as you see fit.\n\nApple IntelApple Silicon (M-chips)Windows PCs\n\n\n\nEssential:\n\nDocker Desktop for Mac with Intel chip\nR-4.4.1 for x86-64/AMD64\nR Studio Desktop\n\nGood to have:\n\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\nCompletely optional:\n\nVS Code (Universal)\nQuarto\niTerm2\n\n\n\n\n\nEssential:\n\nDocker Desktop for Mac with Apple silicon\nR-4.4.1 for ARM64\nR Studio Desktop\n\nGood to have:\n\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\nCompletely optional:\n\nVS Code (ARM64)\nQuarto\niTerm2\n\n\n\n\n\nEssential:\n\nDocker Desktop for Windows\nR-4.4.1\nR Studio Desktop\nGit\n\nGood to have:\n\nQGIS Long-Term Release (LTR)\nGitHub Desktop\n\nCompletely optional:\n\nVS Code\nQuarto",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#next-steps",
    "href": "setup/env.html#next-steps",
    "title": "Programming Environment",
    "section": "Next Steps",
    "text": "Next Steps\nR and R-Studio can be installed fairly easily by double-clicking on the downloaded files and following the instructions. Docker is a bit more complex, so please follow the instructions below.",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#installing-docker",
    "href": "setup/env.html#installing-docker",
    "title": "Programming Environment",
    "section": "Installing Docker",
    "text": "Installing Docker\n\n\n\n\n\n\nEssential Topic\n\n\n\nThis next section is essential to running the sds2024 environment.\n\n\nDocker is a complex application doing very complex things. It’s not surprising that it can be a bit of a pain to install. But once installed, it’s a very powerful platform for ‘doing (spatial) data science’ that’s widely used in industry and, increasingly, academia.\nOne way to think of it as a ‘library’ of ready-made virtual computers that you can copy and use free-of-charge. If you’d like to know more about what Docker is and how it works, you can read more in the Understanding Docker section.\n\n\n\n\n\n\nWindows Users\n\n\n\nPlease ensure that you have installed WSL2 before installing Docker! If you cannot install WSL2 then please have a look at the ‘dealing with errors’ section.\n\n\nAfter you’ve downloaded Docker, you need to:\n\nInstall it – usually this will mean opening the image and either dragging it your Application folder (Mac) or running the installer (Windows)\nStart it up – double-click the Docker icon in your Applications folder to start Docker running.\nFinish setup – once Docker is finished starting up, you should see the login screen below. You do not need to create an account (notice Continue without signing in)\nOn all the subsequent questions you can Skip (upper-right corner) answering as well.\n\n\n\n\nDocker trying to trick you into creating an account\n\n\nYou must finish setting up before proceeding to the next step. You’ll know that you’re ready to move on when you see the ‘Docker Desktop’ window appear listing ‘downloaded images’ and ‘running containers’:\n\n\n\nDocker Desktop\n\n\nIf you didn’t see this then you will need to have a look at the ‘dealing with errors’ section.",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#testing-docker",
    "href": "setup/env.html#testing-docker",
    "title": "Programming Environment",
    "section": "Testing Docker",
    "text": "Testing Docker\nTo test if Docker is installed correctly, you will need either the Terminal (macOS) or the Power Shell (Windows).\n\n\n\n\n\n\nCopy Code to Clipboard\n\n\n\nWhenever you see a ‘code block’ below, you will also see a ‘clipboard’ icon () in the right. Click that, and the code will be copied to your computer’s ‘clipboard’ so that you can then paste it into the Terminal or Power Shell. That will save you a lot of time and effort.\n\n\nDocker has provided a simple way to test if your installation is working correctly. You can run the following command in the Terminal or Power Shell:\ndocker run hello-world\nThis should output something like:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n478afc919002: Pull complete\nDigest: sha256:91fb4b041da273d5a3273b6d587d62d518300a6ad268b28628f74997b93171b2\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (arm64v8)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\nIf you see this message, then Docker is installed correctly and you can move on to the next step. If you see an error message, then you will need to have a look at the ‘dealing with errors’ section. Notice how there are several things happening:\n\nUnable to find image... locally – this is because the hello-world image is not (yet) stored on your computer.\nlatest: Pulling from library/hello-world – this is Docker downloading the hello-world image from the internet.\nPull complete – this is Docker telling you that it has finished downloading the image.\nHello from Docker! – this is the hello-world image running and telling you that Docker is working correctly.\n\nThere’s obviously a lot more to that message, but that’s the basic idea.",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#installing",
    "href": "setup/env.html#installing",
    "title": "Programming Environment",
    "section": "Installing sds2024",
    "text": "Installing sds2024\nWe now need to download the sds2024 image that we use for teaching Foundations and Quantitative Methods. The image is the ‘template’ for running virtual machines (i.e. computers) on our ‘host’ computer and it comes complete with all of the Python libraries and other tools that you’ll need to complete the module (and a good deal more besides!). Installing the image will take a while as it’s quite large (2-5GB) and so will depend on the speed of your internet connection.\n\nIntel Macs and WindowsSilicon/M-Chip Macs\n\n\nIf your Apple computer has an Intel chipset (see:  -&gt; About this Mac -&gt; Processor) or is running Windows:\ndocker pull jreades/sds:2024\n\n\nIf your Apple computer has an M1 or M2 ‘Silicon’ chipset (see:  -&gt; About this Mac -&gt; Processor):\ndocker pull jreades/sds:2024-silicon",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#using",
    "href": "setup/env.html#using",
    "title": "Programming Environment",
    "section": "Using sds2024",
    "text": "Using sds2024\nNow that you have the image downloaded, you can start an sds2024 container by copying the following command into the Terminal or Power Shell (this does not work in the Command Prompt/cmd):\n\nFor Intel MacsFor M-Chip MacsFor Windows\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sds:2024 start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sds:2024-silicon start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 -v \"$(pwd):/home/jovyan/work\" jreades/sds:2024 start.sh jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#success",
    "href": "setup/env.html#success",
    "title": "Programming Environment",
    "section": "Success!",
    "text": "Success!\nHowever, most of you should now be able to connect to the virtual machine by pointing your browser at: localhost:8888 where you should see something like this:\n\n\n\nJupyter Lab Success",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#dealing-with-errors",
    "href": "setup/env.html#dealing-with-errors",
    "title": "Programming Environment",
    "section": "Dealing with Errors",
    "text": "Dealing with Errors\nIf you encounter any problems with the installation, please have a look at the Dealing with Errors section.",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#anaconda-python",
    "href": "setup/env.html#anaconda-python",
    "title": "Programming Environment",
    "section": "Anaconda Python",
    "text": "Anaconda Python\n\n\n\n\n\n\nWarning\n\n\n\nWe only support Anaconda Python as a fallback for students who would otherwise be unable to complete the module because their computer does not support Docker. If you choose to use Anaconda (but could run Docker) then we will not be able to support you.\n\n\nA very small number of students are unable to run Docker on computers running Windows 10 Home (in 23/24 there were none), in which case Anaconda Python can be used with the configuration that we provide. However, if your machine runs Docker then you must use Docker: this isolates the programming environment from your computer, ensuring that nothing is clobbered by accident, and guaranteeing that you are working with the same version of every Python library as the rest of the class (and the versions for which the practicals are tested).\nAnaconda is only supported as a last resort.\nHowever you are always free to install Anaconda Python and to use our YAML configuration script to install the SDS environment, but you should do this in your own time: in previous years students have encountered difficult-to-diagnose bugs in their code (and lost marks in the Assessments!) because they had installed an older or more recent version of a Python library than the one configured and tested in the SDS environment.\nWe believe that the replication advantages of virtualisation outweigh the disbenefits in terms of performance. It also means that you will spend less time installing libraries and more time running code, which is where your attention should really be when you are familiarising yourself with the foundations of data science.\nEventually you will, of course, want to install and manage your own programming environment (possibly even by building and sharing Docker images!) but this can be left for later when you have developed an appreciation of how and when virtualisation is (or is not) an appropriate solution to your needs.",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/env.html#footnotes",
    "href": "setup/env.html#footnotes",
    "title": "Programming Environment",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAnd Podman, which is basically the same thing.↩︎",
    "crumbs": [
      "Programming Environment"
    ]
  },
  {
    "objectID": "setup/git.html",
    "href": "setup/git.html",
    "title": "Git & GitHub",
    "section": "",
    "text": "Git is a ‘version control system’, which is a fancy way of saying that it has the potential to store a complete, line-by-line history of your work… so long as it’s in a plain-text format like Markdown or Python/R code files. Git updates all of this history on your computer every time you ‘commit’ the changes you’ve told it about by ‘adding’ a file. With GitHub you can then synchronise these changes so that you have a full backup (code and content are no longer just on your computer), publish a web site (via github.io), or collaborate with other people (via public, shared ‘repositories’).\nWhile it is not necessary that you learn all about how GitHub works now, it will be really helpful if you can get yourself set up with a GitHub account and install Git locally so that you’re ready to get when we start the term.",
    "crumbs": [
      "Git & GitHub"
    ]
  },
  {
    "objectID": "setup/git.html#get-a-github-account",
    "href": "setup/git.html#get-a-github-account",
    "title": "Git & GitHub",
    "section": "Get a GitHub Account",
    "text": "Get a GitHub Account\nYou will need to go to GitHub.com and then click the Sign up button at the top right. Follow the instructions for creating a new account from there.\n\n\n\n\n\n\nUse Your Personal Account\n\n\n\nAlthough you can always change it later (so if you’ve opened your GitHub account using your UCL email don’t panic!), you may find it easier to:\n\nOpen a GitHub account using a personal email address to which you expect to always have access.\nThen associate your UCL email address to this GitHub account so that you gain from any educational benefits offered by GitHub (there are some around private respositories and so on).",
    "crumbs": [
      "Git & GitHub"
    ]
  },
  {
    "objectID": "setup/git.html#install-git-locally",
    "href": "setup/git.html#install-git-locally",
    "title": "Git & GitHub",
    "section": "Install Git Locally",
    "text": "Install Git Locally\nYou can follow along with GitHub’s own instructions for installing Git on your own computer. In many cases (especially if you use a Mac) you may find that Git is already installed, you just didn’t know it.",
    "crumbs": [
      "Git & GitHub"
    ]
  },
  {
    "objectID": "req/code_camp.html",
    "href": "req/code_camp.html",
    "title": "Code Camp",
    "section": "",
    "text": "Prior to (re)joining CASA from the Department of Geography at King’s College London, Dr. Mic Ferretti, Dr. Zara Shabrina, Dr. James Millington, and I developed Code Camp.\nCode Camp provides a gentle introduction to the basics of programming in Python. Across ten sessions you will learn about syntax, variables, ‘simple’ data structures such as lists and dictionaries, and about the fundamentals of writing functions for reusable code. The sessions are entirely self-led: you should follow along at your own pace and remember that ‘it’s a marathon, not a sprint’. Don’t cram it all into the last week of summer holidays!\nStudents from previous years have repeatedly said that completing Code Camp helped them to feel more ready for the Foundations of Spatial Data Science module, enabling them to do better on assessments and on the programme as a whole.\nSo please, complete Code Camp by the start of term and, if possible, go through the materials more than once!\nYou should have received instructions via email for running Code Camp, but here they are again…",
    "crumbs": [
      "Code Camp"
    ]
  },
  {
    "objectID": "req/code_camp.html#options",
    "href": "req/code_camp.html#options",
    "title": "Code Camp",
    "section": "Options",
    "text": "Options\nCode Camp is publicly accessible through a code-sharing web site called GitHub and can be run using either:\n\nGoogle’s ‘Collaboratory’, or\nThe Open Source Binder tool.\n\nIn both cases there is nothing to install on your computer. You could even use a tablet or phone, though we wouldn't really recommend it. There are two main differences: ‘Colab’ notebooks require an account but can be saved into Google Drive; Binder does not require any registration, but you won’t be able to save anything.",
    "crumbs": [
      "Code Camp"
    ]
  },
  {
    "objectID": "req/code_camp.html#using-google-colab",
    "href": "req/code_camp.html#using-google-colab",
    "title": "Code Camp",
    "section": "Using Google Colab",
    "text": "Using Google Colab\n\nHow to get started:\n\nGo to Google’s Colab site and sign in using your Google account details (or create an account if you don’t already have one).\nChoose File then Open and select the GitHub tab from the open options (it’s between Google Drive and Upload).\nEnter the following URL: https://github.com/kingsgeocomp/code-camp (Jon was with King’s when he helped to create this resource)\nYou should now see a list of notebooks to choose from – the first few are fairly quick to complete, but they get harder as you go along – select the first on in the sequence and click Open in Colab.\nYou will need to trust the notebook in order to run it.\n\nNow you can run code in your web browser! When you are done for the day you can save the notebook to your Google Drive – to re-run that notebook you can just load it from Google Drive, rather than going back to GitHub, but remember that you need to re-run all the cells up to the point where you saved the notebook. Being able to save and re-run a notebook is the main difference from Binder.",
    "crumbs": [
      "Code Camp"
    ]
  },
  {
    "objectID": "req/code_camp.html#using-binder",
    "href": "req/code_camp.html#using-binder",
    "title": "Code Camp",
    "section": "Using Binder",
    "text": "Using Binder\nAll you need to do to get started is click the image below: \nThat’s it! But in case clicking that image doesn’t work, you can also go to: https://bit.ly/33Rc5QD. When Binder starts, you will be able to run the notebooks! The main difference from Colab is that you have to download a notebook from Binder to your local computer in order to save it. To re-run the same notebook, you’d need to upload the notebook to Binder again. So Binder has no ‘memory’ of your work between interactions.",
    "crumbs": [
      "Code Camp"
    ]
  },
  {
    "objectID": "skills/reading.html",
    "href": "skills/reading.html",
    "title": "How to Read",
    "section": "",
    "text": "Although the guidance below, from Tim Squirrel’s Guide is intended for undergraduate essays in history or philosophy, the advice works for all kinds of reading.",
    "crumbs": [
      "How to *Read*"
    ]
  },
  {
    "objectID": "skills/reading.html#referencing",
    "href": "skills/reading.html#referencing",
    "title": "How to Read",
    "section": "Referencing",
    "text": "Referencing\nYou’ll be hearing a lot more about this at the start of term, but the first part of reading is making sure that you are able to trace where the ideas that you’re presenting/discussing/refuting came from. So that means keeping track of what you’ve read and being able to reference it (correctly) right from the start. So a quick sense of how to reference reliably:\n\nIf you are using the exact words of another writer then use double-quotes and supply a page number. For example: As Reades (2021, p.45) wrote: “We need to reference properly because otherwise we have no sense of where an idea came from…”\nIf you are paraphrasing another writer then use single-quotes and supply a page number where relevant. For example: Reades (2021, p.45) argues for the importance of good referencing since ‘without it we have little sense of where ideas come from’…\nIf you are just making a general point then a simple Author and Year citation is sufficient. For example: Reades(2021) and others (Dennett 2015, Fry 2018) have noted the importance of good referencing practice…",
    "crumbs": [
      "How to *Read*"
    ]
  },
  {
    "objectID": "skills/reading.html#getting-started",
    "href": "skills/reading.html#getting-started",
    "title": "How to Read",
    "section": "Getting Started",
    "text": "Getting Started\nIdeally, whenever you are reading an academic article (or other publication) you should be thinking about how you would differ from or improve upon or disagree with the writer. The only way you can do this (and consequently, the only way to get a decent mark) is to do some careful reading:\n\nLook at the reading list. If it seems incredibly long, then your instructor is not expecting you to read it all. What they are expecting you to do is look through it and pick out the articles that speak to you (subject to guidance about what reading is essential) and to your take on the assessments. So a long reading list is not an excuse to not read any of it. Look through the list, identify if there are any readings marked as essential. Read them. If there aren’t any essential readings, pick a few which look interesting and relevant, then read them.\nRead some more. Look through the Bibliographies of the papers and books you’ve just read. See where their ideas came from. Mark out a few of the most promising-looking readings. Read them.\nNote the difference between reading to understand the topic and reading to reference. It is totally fine to use Wikipedia, lecture notes, etc to familiarise yourself with the key arguments and concepts. It is considerably less fine to cite them as your only sources.\nArticles. Read the abstract first. Does it look like it’s relevant? If not, don’t waste your time. If it does, skim it to develop a better sense of how it’s organised, what the intro and conclusion say and whether it’s worth your time to read it more closely. Skip all equations/code. Look over the bibliography as above.\nBooks. In an ideal world you should read books. Great books. Like mine of course! :-) More realistically, unless your entire dissertation hinges on a particular argument made in great detail, then for undergraduate and masters’ study do not read whole books. It’s a waste of your time. You won’t remember any of it, it will drain all of your energy, and you only get one reference and viewpoint out of it. Read the intro and conclusion so that you get the gist of their argument. Pick a chapter from the contents page which looks like it’s relevant to your essay. Read that. As above, find relevant references and follow them up.\nThere is one exception to the ‘books rule’: if you are going to present a ‘Foucauldian critique’ or a ‘Beaudrillardian perspective’ as part of a dissertation then you had better read at least the standard university-level primer on this thinker. You cannot rely on one journal article author’s perspective on a ‘great thinker’s’ oeuvre if you are presenting your work as if it were based on the thinker and not the article.\nIf an article is worth reading in detail, then read critically. For the sake of all that is holy, read critically. This is absolutely essential. Don’t just stare at the pages and try to absorb them like a plant absorbs nutrients. Ask yourself questions (why did they do this? do I think that was a good idea? how would I have done this?) and try to make the process active.\n\nSo things to think about while reading articles:\n\nThe central claim the author is making. Usually there is only one, perhaps two. Summarise it in one sentence if you can.\nWhat is the frame of their argument? When in history is it set? Who are the key actors? Are they responding to another author? If so, what is the argument they’re responding to? Try to position their argument in context. This allows you to:\nCritically assess the claims made. This obviously doesn’t just mean ‘say they’re wrong’. They might well be wrong, but you’ll need to find reasons for it. Generate a list of three reasons for each line of attack you want to take. Scrap the weakest two. If you think they’re right, why are they right? Are there other authors who corroborate their claims? Are there logical reasons to prefer their argument?",
    "crumbs": [
      "How to *Read*"
    ]
  },
  {
    "objectID": "skills/reading.html#article-summary-template",
    "href": "skills/reading.html#article-summary-template",
    "title": "How to Read",
    "section": "Article Summary Template",
    "text": "Article Summary Template\nMake sure you take notes on everything you read. Put page numbers in those notes. In fact, write down any potentially useful (and, ideally, flexible) quotes verbatim with the page numbers. Your goal is to read everything once even if you reference it repeatedly.\nHere is a template for summarising an article. It’s probably a little long, but while you develop your critical faculties it should be useful. To give you a sense of how you might fill this out, here’s a completed example of a summary document for Geography and computers: Past, present, and future.",
    "crumbs": [
      "How to *Read*"
    ]
  },
  {
    "objectID": "skills/help.html",
    "href": "skills/help.html",
    "title": "How to Get Help",
    "section": "",
    "text": "We all need help from time to time—and that’s what we’re here to provide—but the best way to ‘get help’ will always be taking steps to ‘help yourself’ first!",
    "crumbs": [
      "How to Get Help"
    ]
  },
  {
    "objectID": "skills/help.html#important",
    "href": "skills/help.html#important",
    "title": "How to Get Help",
    "section": "Important!",
    "text": "Important!\nWhen you are first learning to code there is no such thing as a stupid question. From time to time we all have lazy questions, which is what happens when we are frustrated and just want to know ‘the answer’ without putting in the work to clarify the problem. However, if any time you find yourself stuck on a particular problem there is a 100% chance that someone else in the class is having the same problem as well but hasn’t quite worked up the courage to ask. So please: ask.",
    "crumbs": [
      "How to Get Help"
    ]
  },
  {
    "objectID": "skills/help.html#helping-yourself",
    "href": "skills/help.html#helping-yourself",
    "title": "How to Get Help",
    "section": "Helping Yourself",
    "text": "Helping Yourself\nHere are four things that you can do to ‘help yourself’ first:\n\nUse Google–this is one course where saying “I googled it…” will be taken as a good sign! Probably the biggest difference between a good programmer and a new programmer is that the good one knows which terms to type into Google to get the answer that they need right away.\nUse Stack Overflow–as you become a better programmer you’ll start to understand how to frame your question in ways that produce the answer you need in the first couple of search results, but whether you’re a beginner or an expert Stack Overflow is your friend. True story: I have sometimes found answers that I provided (but didn’t remember giving) when trying to solve a problem.\nUse the work of others–beyond the readings that we’ve assigned to support the module’s learning outcomes there is a world of knowledge out there on which you can build! Use Google Scholar, Medium, and dedicated tutorial-type sites like Towards Data Science and Programming Historian to see if you can find others who have had similar challenges.\nUse the dedicated Slack channel–this provides a much richer experience than the Moodle Forum and should be your primary means of requesting help outside of scheduled teaching hours because you can get answers from other staff, other students, and the wider CASA community.\n\nYes, this is a lot of things to do when you want to know the answer to what feels like a simple question, but it’s an investment. If we just ‘give’ you the answer then chances are you’ll forget it as soon as your code starts running again; hwoever, if you’ve had to invest your time and energy in sorting through a whole range of answers (some useful, some not) then you have found it for yourself in a way that you’ll not soon forget. In fact, you’ve learned something about both how to frame questions and how to identify useful answers. That, frankly, is a much more valuable skill!",
    "crumbs": [
      "How to Get Help"
    ]
  },
  {
    "objectID": "skills/help.html#creating-opportunities",
    "href": "skills/help.html#creating-opportunities",
    "title": "How to Get Help",
    "section": "Creating Opportunities",
    "text": "Creating Opportunities\nLearning to code is like learning a language: you need to practice! Set yourself little problems or tasks and see if you can apply what you’ve learned in class to a problem in a different class, or to a friend’s problem, or just something you’re curious about! In the same way that practicing your Chinese or French with native speakers will help you to learn those languages, so will practicing your Python.",
    "crumbs": [
      "How to Get Help"
    ]
  },
  {
    "objectID": "skills/help.html#how-we-can-help",
    "href": "skills/help.html#how-we-can-help",
    "title": "How to Get Help",
    "section": "How We Can Help",
    "text": "How We Can Help\nIf you’ve gone through steps 1–4 and don’t feel any closer to a solution then it’s time to get our input! So the final steps:\n\nMake use of ‘Office Hours’–if you are struggling, then tell us! We can’t help you if we don’t know that you’re lost! That doesn’t mean that we can simply ‘give’ you the answers to challenging questions, but we will do everything that we can to support you in finding and understanding the answers.\nEmail us–Slack will usually be faster, but for personal questions or ones you’re just not comfortable asking in public, then email away!\nSign up for online classes–realistically, you will have a lot on your plate this year, but if you want or need more practice with Python then there is a wealth of options out there for ‘further study’ and ‘further practice’. Perhaps you’ll find a resource that speaks to you in a way that our module doesn’t!",
    "crumbs": [
      "How to Get Help"
    ]
  },
  {
    "objectID": "skills/help.html#how-to-ask-for-help",
    "href": "skills/help.html#how-to-ask-for-help",
    "title": "How to Get Help",
    "section": "How to Ask for Help",
    "text": "How to Ask for Help\nHowever tired you are, don’t send a stream of consciousness late-night email saying little more than “Hey, I’m stuck on this problem can you solve it?” Go to bed. Sleep on it. And if you’re still stuck in the morning it’s time for the email.\nWhat does a useful email look like? You might want to follow this overview of how to get a busy person to respond to your email:\n\nKeep it short.\nFormat it for readability and clarity.\nMake it clear what you want me to do.\nBe reasonable with your request.\nShow me why I should take the time to help you.\n\nThat last point isn’t quite as rude as it sounds! If you’ve gone through steps 1–4 above, then it’s actually easy to explain what you’ve done, what you’ve found, why you think things aren’t working, and whether you have any ideas for solving your issue! If you’ve done all this then your question will never be a result of laziness, so that suggests there’s something for us to learn about how we teach!\nIn academia there are a few more things I’d add:\n\nWhat module are you emailing me about?\nWhat is your student id? (Especially if it’s about Extenuating Circumstances or an Assessment)\nIs the question about a specific practical, lecture, or technical problem?\n\nAnd here is some additional insight into how to email your professor (without being annoying AF):\n\nSalutation: should I use “Dear”, “Hello” or “Hi”?\nHonourific: should I use “Mr”, “Ms”, “Dr” or “Professor”? Hint: don’t ever use Mr/Mrs/Ms.\nName: for god’s sake, please try not to get this wrong.\nExceptions: always look at how your Prof or TA responds to you for cues about how to respond to them.\nBe nice: treat your TA and Prof like human beings please!\nRemind me who you are: anything that allows me to place you and your question in context will help me to give you effective help.\nThe reason: tell me as precisely as possible why you are emailing me and what you want/hope to achieve by doing so.\nDo the legwork (this is the ‘show me why I should take the time to help’ thing above): if the answer is in the Syllabus or the recorded content then I may not answer your question. Or I may just write “It’s in the syllabus” and leave it at that. Show me that you’ve tried to answer your question yourself and give me a sense of what you’ve already tried. For instance, if your problem is technical then “I couldn’t install the software and it didn’t work” tells me nothing about your actual problem (see also information on asking a good tech question).\nWrap-up and Sign-off: is there a deadline (e.g. for a recommendation) or some other issue that I need to factor into my plans? Some recognition of thanks never goes amiss.\n\n\nThe Follow-Up!\nIf we don’t reply to you then send a reminder! The trick is to send the reminder at the right time: if you are about to fail an assessment or are three weeks into the course and still can’t run the programming environment then your problem is urgent and you can send a reminder much sooner than if you’re wondering ‘if X would be a good topic for the final assessment’. As the Medium blogger puts it: “If it can wait a week, let it wait a week” (before following up).\n\n\nWhy This Matters\nWe all have different ‘registers’ for speaking with other people: family (siblings vs. grandparents), friends (close friends vs. acquaintances), and so on. A professionally-written email is a vital work skill since most of the people that you will end up working for will use email over all the other channels available now. Sending an email like this will not get you the help you need:\n\nHey Bossman,\nAre U awake at 2am like me? LOL. Having problems and not going to finish the report in time for meeting tomorrow. Can you give me an extension?\nLater.\n\nIf you’re worried that you might not be hitting the right ‘tone’ then it’s ok to say so and to ask if you could write it better/differently in the future. This shows reflection and thought, which is all that we really want from our students anyway!",
    "crumbs": [
      "How to Get Help"
    ]
  },
  {
    "objectID": "skills/help.html#what-grade-do-you-want",
    "href": "skills/help.html#what-grade-do-you-want",
    "title": "How to Get Help",
    "section": "What Grade Do You Want?",
    "text": "What Grade Do You Want?\nFinally, we want you to think about how to learn what you need to learn. This is called meta-cognition—thinking about thinking—and it’s probably one of the most important study skills of all. So here you need to think about what you want from, for example, an assessment: do you just want to pass, or do you want to hit it out of the park?\nSome questions to ask yourself:\n\nFor an exam: What kinds of questions might it include?\nFor an essay/written piece: What kinds of topics have we covered in class?\nFor either: identify key terms, define those terms, and question the question (what might be the assumptions behind it?).\nWhich of resources would help me to study/prepare?\nHow should I make use of lecture notes, practice exam questions, textbook and other readings, instructor office hours, peer discussions, and tutoring. Write down why each resource would be useful and how you could use it to map out a study/writing plan.\nHow does my essay work as a story? I don’t necessarily mean a mystery or adventure novel, but a good essay has: a plot (what is sometimes called a narrative arc), characters (the key ideas from the literature, the data, the methods, the problems…), development (which character needs to be introduced first?), and a conclusion (what happened?). Have a look at the Tim Squirrel Guide where it talks about essay stucture.\nLooking at this literature/piece of research, is this the way that I would have done it? If I would have done it differently do I think that would have been more, or less, effective? Why or why not?\nLooking at my peers, is there someone who is doing really well who I could talk to about how they study, code, or write? How do they organise their time? How do they make use of the resources (literature, etc.)?\n\nIf all you want is a pass then organise yourself for a solid pass. If you want to excel then you’re going to have to do things a bit differently. There’s space for both approaches, but being clear about which you want will help you to prioritise the important stuff.\nAlso pay attention to what constitutes a ‘good’ output: in some cases you are being asked to write a scientific/academic essay, for which there are easy-to-follow ‘rules’, but this doesn’t work for non-scientific formats!",
    "crumbs": [
      "How to Get Help"
    ]
  },
  {
    "objectID": "skills/Template.html",
    "href": "skills/Template.html",
    "title": "Reading1",
    "section": "",
    "text": "Is it an academic paper, technical report, blogpost, etc.? And what kind of contribution is trying to make? Conceptual, theoretical, empirical or something else?"
  },
  {
    "objectID": "skills/Template.html#what-kind-of-reading-is-it",
    "href": "skills/Template.html#what-kind-of-reading-is-it",
    "title": "Reading1",
    "section": "",
    "text": "Is it an academic paper, technical report, blogpost, etc.? And what kind of contribution is trying to make? Conceptual, theoretical, empirical or something else?"
  },
  {
    "objectID": "skills/Template.html#who-is-the-intended-audience",
    "href": "skills/Template.html#who-is-the-intended-audience",
    "title": "Reading1",
    "section": "2 Who is the intended audience?",
    "text": "2 Who is the intended audience?\n\nIs it intended for academics, field experts, the general public? etc.? For example, if you think this is intended for someone who needs to learn new skills or someone who is in a policy-making position how do you know this?"
  },
  {
    "objectID": "skills/Template.html#how-is-the-piece-structured",
    "href": "skills/Template.html#how-is-the-piece-structured",
    "title": "Reading1",
    "section": "3 How is the piece structured?",
    "text": "3 How is the piece structured?\n\nBriefly, how is it organised in terms of headings, sub-headings, sections, etc.? Can you explain this structure responds to the kind of reading and type of audience?"
  },
  {
    "objectID": "skills/Template.html#what-are-the-key-ideas-concepts-or-theories-discussed",
    "href": "skills/Template.html#what-are-the-key-ideas-concepts-or-theories-discussed",
    "title": "Reading1",
    "section": "4 What are the key ideas, concepts, or theories discussed?",
    "text": "4 What are the key ideas, concepts, or theories discussed?\n\nBriefly identify the specific areas that the contribution engages with. How do you know this?"
  },
  {
    "objectID": "skills/Template.html#what-is-the-overall-contribution",
    "href": "skills/Template.html#what-is-the-overall-contribution",
    "title": "Reading1",
    "section": "5 What is the overall contribution?",
    "text": "5 What is the overall contribution?\n\nWhat does it build on or what gap does it respond to? What are the key findings or conclusions?"
  },
  {
    "objectID": "skills/Template.html#what-issues-or-gaps-remain",
    "href": "skills/Template.html#what-issues-or-gaps-remain",
    "title": "Reading1",
    "section": "6 What issues or gaps remain?",
    "text": "6 What issues or gaps remain?\n\nIf relevant, are there assumptions that might not hold in other contexts? Can you think of other case studies or contexts where the reading would apply and explain why? If you think the contribution is generally valid can you explain why? Are there areas for future work identified?"
  },
  {
    "objectID": "skills/Template.html#how-does-this-connect-to-the-moduleprogramme",
    "href": "skills/Template.html#how-does-this-connect-to-the-moduleprogramme",
    "title": "Reading1",
    "section": "7 How does this connect to the module/programme?",
    "text": "7 How does this connect to the module/programme?\n\nReflecting on the answers given by the two students, what connects this reading to the rest of module? For example, why did we assign it and make you talk about it? Does it prompt reflection on anything else you’ve read? Are there connections to other modules you’re taking? Why? What further questions does this reading raise for you?"
  },
  {
    "objectID": "setup/markdown.html",
    "href": "setup/markdown.html",
    "title": "Markdown",
    "section": "",
    "text": "Markdown is a ‘markup language’ for documents that is compatible with a lot of different tools (including GitHub and Jupyter) that we use day-in and day-out for doing our research and teaching. Many of us have now largely stopped using Word (and even LaTeX) except for the final polishing of a document. Why? Because Markdown is faster, simpler, and just gets out of the way when we’re writing. So rather than fiddling about with Word’s styles (or, worse, discovering that you should have been using styles all along) or with LaTeX’s painful table layout, you can just get on with writing in Markdown and then export to Word or LaTeX for the final steps. Best of both worlds!\nIn fact, Markdown is so handy that it’s become the default for writing content for the web. This web site was actually written in Markdown and then ‘rendered’ (i.e. turned into a functional web page) using Quarto. We’ve included Quarto on the SDS2022 Docker image that we’ve recommended you use.",
    "crumbs": [
      "Markdown"
    ]
  },
  {
    "objectID": "setup/markdown.html#markdown-editors",
    "href": "setup/markdown.html#markdown-editors",
    "title": "Markdown",
    "section": "Markdown Editors",
    "text": "Markdown Editors\nOver time you will undoubtedly learn how to write markdwon without need to think much (if at all) about how to type the formatting ‘codes’, but a simple markdown editor can make your life much, much easier. Even when you’re highly experienced!\n\nFor MacOSFor WindowsFor Linux\n\n\nThere’s a good overview of ‘free’1 editors for the Mac which highlights a few in particular:\n\nMacDown – I’ve not used this, but it seems determinedly FOSS so is probably a good choice.\nHaroopad – this looks like a more powerful, but less immediatley user-friendly editor.\nAtom – I’ve used Atom for editing Python code but believe it’s largely plugin-based so it clearly supports markdown too.\n\nTypora was free while in beta, but I thought it was worth the modest amount of money asked for something that was super-fast and gave me a tool with which to write up my research, not just my code and teaching content. iA Writer is another good (paid for) option because it runs on iPad and iPhone as well! Together with the Working Copy Git client for iOS I’ve used iA Writer to draft articles, make notes directly in my codebase, and correct errors found at the last minute in my teaching materials. Like Typora, iA Writer is probably intended more for writing text, not writing complex Reveal.js presentations or non-standard markdown.\n\n\nI don’t have access to a Windows machine to test this out, but there are plenty of opinions to be found by Googling ‘best Windows Markdown editors’ or ‘best free Windows Markdown editors’. There’s one for writers and a more generic set of recommendations. Have a look around and see what you like!\n\n\nIf you use Linux already do you really need a recommendation? How about vim or vi?",
    "crumbs": [
      "Markdown"
    ]
  },
  {
    "objectID": "setup/markdown.html#using-markdown",
    "href": "setup/markdown.html#using-markdown",
    "title": "Markdown",
    "section": "Using Markdown",
    "text": "Using Markdown\nFor Markdown to be useful as more than just a lightweight way to write notes, we want to be able to render it into new output formats/contexts. Here are three…",
    "crumbs": [
      "Markdown"
    ]
  },
  {
    "objectID": "setup/markdown.html#markdown-github",
    "href": "setup/markdown.html#markdown-github",
    "title": "Markdown",
    "section": "Markdown & GitHub",
    "text": "Markdown & GitHub\nMarkdown is the ‘default’ language of GitHub, which means it’s worth your while to familiarise yourself with how it works. However, there are different ‘flavours’ of markdown, which also means that just because something works on GitHub it will work everywhere else in the same way. This is particularly common when dealing with optional parameters that try to give the ‘renderer’ (the thing that converts markdown to HTML, or LaTeX, or any other format) hints about how the content should look.",
    "crumbs": [
      "Markdown"
    ]
  },
  {
    "objectID": "setup/markdown.html#markdown-notebooks",
    "href": "setup/markdown.html#markdown-notebooks",
    "title": "Markdown",
    "section": "Markdown & Notebooks",
    "text": "Markdown & Notebooks\nMarkdown is also the language of plain-text cells in Jupyter notebooks, which makes it doubly worth your while to familiarise yourself with how it works.",
    "crumbs": [
      "Markdown"
    ]
  },
  {
    "objectID": "setup/markdown.html#quarto",
    "href": "setup/markdown.html#quarto",
    "title": "Markdown",
    "section": "Quarto",
    "text": "Quarto\nQuarto builds on RMarkdown to make the power of Markdown+Code available to other languages than R. In our Foundations of Spatial Data Science module we use Quarto to do submissions but that’s largely because it demonstrates how we can Quarto to write whole articles or dissertation!\nIn many cases, it is as straightforward as installing Quarto and then running quarto render ..., but there are some tricks. In particular, to ‘render’ Markdown files to PDF, you will need to have some flabour to TeX installed. The default suggested by Quarto is TinyTex, and this can be installed using:\nquarto install tool tinytex\nBut on some platforms there are additional issues:\n\nMacWindows\n\n\nYou will probably be able to successfully install tinytex, but then be told that no TeX installation could be found when trying to render. The issue relates to the $PATH where Quarto searches for a valid TeX installation and when completing the installation you may have seen a warning to the effect of “To complete the installation, please run the following…”\nSo that’s basically what we need to do. The first thing you need to do is find the TinyTeX binaries, in the cases that I’ve been able to fix these were found under something like $HOME/Library/TinyTex/bin/, but you may need to look further under $HOME/Library/ to find the TinyTex directory.\nOnce you know where TinyTeX is (adjust the cd command below as necessary), you can then follow the suggestion given:\ncd $HOME/Library/TinyTeX/bin/\n./universal-darwin/tlmgr option sys_bin $HOME/Library/TinyTeX/bin\n./universal-darwin/tlmgr path add\nThat should do it, but in case you are still getting errors, then the following might be necessary (again, adjust the path if necessary):\necho \"export PATH=\\\"/Users/$(whoami)/Library/TinyTeX/bin:\\$PATH\\\"\" &gt;&gt; $HOME/.zshrc\nThe command above uses whoami to set the username and assumes that’s how things should be set up, but don’t blindly copy+paste and assume this will work! You could, for instance, check this location exists first using: ls /Users/$(whoami)/Library/TinyTeX/bin/ That will show if the path exists! The above command then updates the $PATH variable used by your Terminal to look for binaries, enabling Quarto to find TinyTeX once you close and then re-open a new Shell.\n\n\nMost commands seem to require replacing quarto with quarto.exe to run correctly. So quarto render Template.qmd becaomes quarto.exe render Template.qmd.\nHowever, if you are still getting errors to the effect that Quarto cannot be found then you may need to make additional edites to your .bashrc file (this is the configuration file for bash):\n\nCheck where Quarto is installed, it is most likely under /mnt/c/Users/&lt;Your Username&gt;/AppData/Local/Programs/Quarto/bin (replace &lt;Your Username&gt; as appropriate.\nEdit the .bashrc file in your $HOME directory. On Windows I would Google search for the best way to do this: “edit .bashrc file Windows”.\nAdd the following line at the end of the file: export PATH=/mnt/c/Users/&lt;Your Username&gt;/AppData/Local/Programs/Quarto/bin:$PATH\nSave the file and run source .bashrc in the Terminal.\nYou should now be able to run the following command successfully: quarto.exe --help",
    "crumbs": [
      "Markdown"
    ]
  },
  {
    "objectID": "setup/markdown.html#footnotes",
    "href": "setup/markdown.html#footnotes",
    "title": "Markdown",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNot all of these are still free.↩︎",
    "crumbs": [
      "Markdown"
    ]
  },
  {
    "objectID": "setup/index.html",
    "href": "setup/index.html",
    "title": "Setup",
    "section": "",
    "text": "Once you’ve ticked off the Requirements, you can start installing the tools that you will use to write and run both code and documentation. You will need set up Git and GitHub in order to manage, share, and version code. To write documentation and comments on code you will be want a Markdown editor and to familiarise yourself with Markdown’s syntax. And, finally, you will need to install the programming tools."
  },
  {
    "objectID": "setup/index.html#installation",
    "href": "setup/index.html#installation",
    "title": "Setup",
    "section": "",
    "text": "Once you’ve ticked off the Requirements, you can start installing the tools that you will use to write and run both code and documentation. You will need set up Git and GitHub in order to manage, share, and version code. To write documentation and comments on code you will be want a Markdown editor and to familiarise yourself with Markdown’s syntax. And, finally, you will need to install the programming tools."
  },
  {
    "objectID": "setup/index.html#no-install",
    "href": "setup/index.html#no-install",
    "title": "Setup",
    "section": "No Install",
    "text": "No Install\nIf you are unable to get your hands on a machine that meets the basic requirements or on to which you can install the necessary tools, then you should look at the no install options. These are generally cloud-based options and are necessarily a ‘second best’ since limitations imposed by the provider mean that you probably won’t be able to process the full data set with which we’ll be working, but as a stop-gap they are perfectly useable."
  },
  {
    "objectID": "req/health.html",
    "href": "req/health.html",
    "title": "Health Check",
    "section": "",
    "text": "When answering the questions below, ‘your computer’ is the machine on which you plan to do the programming. You will also have some ability to run code remotely on UCL’s JupyterHub or on Google Collab (see No Install), but you will find that limitations in processing power on these cloud platforms can make this a frustrating experience.",
    "crumbs": [
      "Health Check"
    ]
  },
  {
    "objectID": "req/health.html#hardware-requirements",
    "href": "req/health.html#hardware-requirements",
    "title": "Health Check",
    "section": "Hardware Requirements",
    "text": "Hardware Requirements\nWe try to support as many different configurations as possible, but there is no programming environment that installs and runs seamlessly on all computers. However, in our experience the students most likely to encounter problems share one or more of the following:\n\nYour computer 8GB or less of RAM.\nYour computer has less than 20GB of free disk space remaining.\n\nRead on below to check what specification you have…\n\nMacOSWindowsLinux\n\n\nYou will need to look up:\n\nHow much RAM does your main computer have? Help for Mac.\nHow much free disk space does your main computer have? Help for Mac.\n\n\n\nYou will need to look up:\n\nHow much RAM does your main computer have? Help for Windows.\nHow much free disk space does your main computer have? Help for Windows.\n\n\n\nWe’re going to assume that you know what you’re doing. If you want a recommendation, we’d probably go with the latest Ubuntu desktop release.\n\n\n\nIf your computer has less than 8GB of RAM and/or less than 20GB of free disk space you are likely to have issues with Docker and (on Windows) WSL2. Your options are: 1) add more RAM (possible on Windows); 2) back up and remove unnecessary files (Movies, Photos, and Applications are particularly big ‘hogs’).\n\nRecommendations\nIf you are looking for a recommendation as to what to buy:\n\nDon’t worry about getting the fastest chip, get as much RAM as you can. You should aim for 32GB of RAM, but get more if you can afford it.\nDon’t worry about getting the biggest hard drive, get the fastest one you can. You should get a SSD (Solid State Drive), but get a M2 type SSD if you can afford it and it’s available for your system.\nOnly after you’ve sorted this out should you look for the fastest chipset that’s still within your budget.\n\n\nShould you buy a Windows, Linux, or Apple machine?\nYou should probably stick with whatever you’re familiar with since learning your way around a new Operating System while also learning to code is just raising the bar unnecessarily. Around CASA we use a mix of all three, and you can probably find as many opinions as there are staff members.\n\n\nShould you buy a M2 or M1 Mac?\nIt depends. Here’s a good article from MacWorld covering the pros and cons. Short answer: right now (June 2022) the M1 is probably faster for most data science applications, but expect that to have changed by June 2023. But either way: a fast chip with not enough RAM will be much slower than a slow chip with abundant RAM.\n\n\n\n\n\n\nSaving Money\n\n\n\nTwo easy things to do to save money on a new machine are:\n\nUnless there is a specific reason to do so (e.g. getting a system with Apple’s M1/M2 chip), don’t buy the latest machine, buy a model from earlier in the year/the previous year instead and upgrade the RAM and hard drive instead.\nOnly buy the machine when you have access to a student discount. The discount for Apple computers is relatively modest (ca. 10%) compared to ‘back to school’ offers for Windows machines, but as the Brits would say: even 10% is better than a kick in the teeth!",
    "crumbs": [
      "Health Check"
    ]
  },
  {
    "objectID": "req/health.html#software-requirements",
    "href": "req/health.html#software-requirements",
    "title": "Health Check",
    "section": "Software Requirements",
    "text": "Software Requirements\nWe try to support as many different configurations as possible, but there is no programming environment that installs and runs seamlessly on all computers. However, in our experience the students most likely to encounter problems share one or more of the following:\n\nYour computer runs Windows 10 Home or older, or\nYour computer runs MacOS 10.13 (High Sierra) or older.\n\nAs long as your computer is running one of the last two major releases of the Operating System you should encounter few issues.\n\nMacOS\nYou will need to look up:\n\nWhat Operating System and Version is your main computer running? Help for Mac.\n\n\n\nWindows\nYou will need to look up:\n\nWhat Operating System and Version is your main computer running? Help for Windows.\n\n\n\nRecommendations\nIf you are using a Mac then your system should have the option to update to the latest version of the MacOS at no charge. If you are unable to update then it is likely that you have an older machine that is not fully supported by the most recent Operating System and, in all probability, you will also encounter issues running the programming environment.\nIf you are using a Windows PC then try to update to either Windows 11 or to Windows 10 Pro as this will ‘unlock’ additional features that are useful for supporting the programming environment. As a student you are likely to qualify for significantly cheaper/free updates, so make sure you do this when you have access to a discount.",
    "crumbs": [
      "Health Check"
    ]
  },
  {
    "objectID": "req/health.html#system-updates",
    "href": "req/health.html#system-updates",
    "title": "Health Check",
    "section": "System Updates",
    "text": "System Updates\nNow that you know your computer is ‘up-to-spec’, please ensure that your computer is fully up-to-date with all Operating System and application updates before following any of the other steps in this brief guide to getting started.\n\n\n\n\n\n\nAutomatic Updates\n\n\n\nOnce you have installed the programming environment we strongly recommend that you turn off automatic updates for your computer until the end of the academic year. This is not to say that you should not install security and other updates over the course of the year, but to emphasise that it should be at a time of your choosing. In previous years, students’ computers have automatically updated to a whole new operating system version two nights before an assessment deadline, breaking existing code and causing lots of needless stress.",
    "crumbs": [
      "Health Check"
    ]
  },
  {
    "objectID": "docker/moving_to_d.html",
    "href": "docker/moving_to_d.html",
    "title": "Moving Docker’s Storage Location on Windows 10 Pro",
    "section": "",
    "text": "To change the default location of Docker’s storage drive (which is typically on the C: drive) on Windows 10 Pro, you’ll need to adjust the configuration in Docker Desktop to move the virtual machine’s disk image. Here’s how to do it:\nSteps:\nSteps to Change Docker’s Storage Location on Windows 10 Pro:"
  },
  {
    "objectID": "docker/moving_to_d.html#last-steps",
    "href": "docker/moving_to_d.html#last-steps",
    "title": "Moving Docker’s Storage Location on Windows 10 Pro",
    "section": "Last Steps!",
    "text": "Last Steps!\nThe following should be done as the last migration steps to move Docker Disk Image Location:\n\nOpen Docker Desktop and go to Settings.\nNavigate to Resources &gt; Advanced.\nIn the Disk Image Location section, click Browse and select the new location, such as D:or another folder on the D: drive.\nAfter selecting the new location, apply the changes and restart Docker Desktop.\n\nThis should relocate Docker’s WSL2 disk image from C: to your D: drive. Screenshot is attached below for reference.\n\n\n\nDocker Disk Image Location"
  },
  {
    "objectID": "conda/index.html",
    "href": "conda/index.html",
    "title": "Installing Anaconda Python",
    "section": "",
    "text": "Why Use Docker Instead?\n\n\n\nYou are strongly encouraged to use Docker instead of installing Anaconda Python directly. The basic reason for this is that you may encounter installation errors or version differences that mean your experience of running the Spatial Data Science environment is seriously impaired.\nIf you really want to install natively, despite everything we said above, then you will need Anaconda Python (Python 3 64-bit) to be able to install the programming environment."
  },
  {
    "objectID": "conda/index.html#citing",
    "href": "conda/index.html#citing",
    "title": "Installing Anaconda Python",
    "section": "Citing",
    "text": "Citing\nThis draws heavily on Dani Arribas-Bel’s work for Liverpool. If you use this, you should cite him.\n\n\n\nDOI\n\n\n@software{hadoop,\n  author = {{Dani Arribas-Bel}},\n  title = {\\texttt{gds_env}: A containerised platform for Geographic Data Science},\n  url = {https://github.com/darribas/gds_env},\n  version = {3.0},\n  date = {2019-08-06},\n}"
  },
  {
    "objectID": "req/wsl.html",
    "href": "req/wsl.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "MacOSWindows\n\n\nYou need the Xcode Command Line Tools installed on your Mac. In some cases this may have already been installed, but it’s the same process to check as to install:\n\nOpen the Terminal application (which can be found under Utilities in your Applications folder).\nType the following: xcode-select --install and then hit Enter (⏎)\n\nUnless you get an outright error you can proceed to the next step:\n\nAlthough not strictly necessary, you’ll eventually want the Homebrew package manager, which can also be installed directly from the Terminal.\n\n\n\nYou will need to install WSL2 but, strangely, you do not actually need to install a full Linux O/S, so as far as we can tell this means you only need to run the following commands in the Windows PowerShell:\n\nwsl --install should quickly install the subsystem that we need.\nwsl --update will ensure that the most up-to-date version is available.\n\nThat should be it: Docker should now run without complaint.\n\n\n\n\n\n\nIf You Need More Help\n\n\n\n\nThere is good guidance from Microsoft for Windows 11 and more recent ‘builds’ of Windows 10.\nThere are also older instructions for Windows 10.\n\nCommon installation errors are covered here.\nFinally, if you are still being told that you can’t install WSL2 and Linux, then the most likely cause of this issue is a setting in the BIOS of the computer itself. There are a couple of settings that need changing at a very low level to enable Hyper-V virtualisation. I would start by following this MS guide and, if there is still a problem, check this blog post."
  },
  {
    "objectID": "docker/advanced.html",
    "href": "docker/advanced.html",
    "title": "Advanced Topics",
    "section": "",
    "text": "This page covers more advanced topics related to the use of Docker and VSCode with the jreades/sds:2024 image. These are all entirely optional steps if you want to get deeper into managing Docker and managing Python code in ways not covered in Foundations, so you should only explore these if you are comfortable with what we are already doing and are reasonably knowledgeable about the development ‘stack’ (in which case, why are you taking Foundations?).",
    "crumbs": [
      "Advanced Topics"
    ]
  },
  {
    "objectID": "docker/advanced.html#bash-script",
    "href": "docker/advanced.html#bash-script",
    "title": "Advanced Topics",
    "section": "Bash Script",
    "text": "Bash Script\n\n\n\n\n\n\nIntermediate Topic\n\n\n\nThis next section is only if you want to start using multiple images/containers or manipulating the way the jreades/sds:2024 starts up. This is not needed for most students.\nAs well, this script only works if you have a full Unix/Linux-compatible system. So macOS has this by default. On Windows you need to take the next step after install WSL2 and actually install a full Linux distribution (we’d suggest Ubuntu).\n\n\nThere are so many additional options for configuring Docker that we created a Bash script to do most of it for you; however, this needs to be paired with a configuration file that is kept in the same folder as the docker.sh script.\nSo it’s an extra step to getting up and running, but it allows you to easily change the port on which Jupyter Lab is served as well as to turn Quarto and Dask on/off by commenting/editing/uncommenting the port number in the config.sh file. You cannot run this in the Windows Power Shell.\nThis simplifies the process to the point of starting Docker with:\nbash docker.sh start\nAnd you can cleanly shut down the container using:\nbash docker.sh stop",
    "crumbs": [
      "Advanced Topics"
    ]
  },
  {
    "objectID": "docker/advanced.html#dask-and-quarto",
    "href": "docker/advanced.html#dask-and-quarto",
    "title": "Advanced Topics",
    "section": "Dask and Quarto",
    "text": "Dask and Quarto\n\n\n\n\n\n\nAdvanced Topic\n\n\n\nThis next section is only if you need to run either Dask or Quarto (both of which are provided by jreades/sds:2024). This is not needed by students in Week 1, though you will use Quarto for the group project.\n\n\nTo run Dask and Quarto you need to ‘open up’ other ports on the Docker image:\ndocker run --name sds2024 --rm -d \\\n  -p 8888:8888 -p 4201:4201 -p 8787:8787 \\\n  -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sds:2024 jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\nUsing the Terminal built into the sds2024 container, you will then need to ensure that the version of Quarto built into the image runs on the same port that you specified when starting up Docker:\nquarto preview --host 0.0.0.0 --port 4201\nNotice the everything to do with Quarto is on port 4201, but note additionally the --host 0.0.0.0 that is required to allow you to view Quarto’s output if you want to serve a web site, for instance, instead of static content outside of the Docker container.\nThe Dask port is where the Dask task manager will be visible when you are making full use of its multiprocessing features within the Docker container (e.g. using four cores at once where you’ve enabled this is Docker preferences on your Mac or Windows machine).",
    "crumbs": [
      "Advanced Topics"
    ]
  },
  {
    "objectID": "docker/advanced.html#vscode-integration",
    "href": "docker/advanced.html#vscode-integration",
    "title": "Advanced Topics",
    "section": "VSCode Integration",
    "text": "VSCode Integration\n\n\n\n\n\n\nAdvanced Topic\n\n\n\nThis next section is only if you want to program in VSCode instead of Jupyter Lab. This is not needed for most students.\n\n\nIn principle the below will work. We have it working on Mac OSX and the same process should work on Windows. In practice, this should be considered a ‘beta feature’ in the sense that the documentation is still in development and we’re working out a few kinks. We’ll keep you posted on our progress!\n\nUsing Devcontainer\n\n\n\n\n\n\nCurrently Broken\n\n\n\nWe’re investigating why this approach doesn’t work, but we’re currently unable to get the devcontainer approach to run successfully despite having attempted to update it for 2023. We’ll correct this when we can.\n\n\nThe easier (but less tested) way to connect is to download the contents of test-vscode-project from GitHub. You should place the three resources in the same directory on your computer where you plan to save your notebooks, data, and other resources (e.g. $HOME/Documents/CASA/fsds/).\nYou then tell VSCode to Open Workspace from File and point it to this directory. It should then ask if you want to run the container associated with the project. The first time you do this it may take some time to get started as it still has to pull the image from Docker Hub. You can break this into steps by running docker pull jreades/sds:2024 before dealing with downloading these files and moving them into position.\n\n\nUsing Attach to Running Container\nTo enable VSCode integration you’ll need to create additional ‘mount points’ (‘locations’ on your computer’s file system) that the Docker image can access. At this point the command becomes very long, which is why there is a script designed to make this a more straightforward process provided below.\n\n\n\n\n\n\nM1/M2 Macs\n\n\n\nRemember to add -silicon to the image name (jreades/sds:2024) if you are suing a M1 or M2 Mac.\n\n\ndocker run --rm -d --name sds2024 \\\n  -p 8888:8888 -p 4201:4201 -p 8787:8787 \\\n  -v \"$(pwd):/home/jovyan/work\" \\\n  -v \"${HOME}/.vscode/containers/sds2024-extensions:/home/jovyan/.vscode-server/extensions\" \\\n  -v \"${HOME}/.vscode/containers/sds2024-insiders:/home/jovyan/.vscode-server-insiders\" \\\n  jreades/sds:2024 jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\nRequired Extensions\nThis then enables you to install the required integration extensions as follows:\n\nThe Dev - Containers extension from Microsoft, which will allow you to use a Docker container as a virtual environment from VSCode.\nThe Docker extension from Microsoft, which allows you to interact with images/containers from within VSCode.\nThe Jupyter exension, which will allow you to execute Jupyter Notebooks directly within VSCode.\nThe Jupyter Renderers extension which adds support for media outputs, especially interactive ones.\nThe Pylance extension which works as a language server (will do code highlighting, syntax checking, etc.) for Python.\nThe Python extension which provides rich support for Python &gt;= 3.7.\nThe Gremlins Tracker extension which highlights non-printing characters that can make code fail to execute properly.\nThe GitHub CoPilot extension which provides AI-assisted code completion and suggestions. To get the most from this you will need to add your UCL email address to your GitHub account and then request access to the academic program.\n\n\n\n\n\n\n\nJupyter Keymap Extension\n\n\n\nThe “Jupyter Keymap” exension which provides the same keymaps in VSCode that exist in JupyterLab is globally enabled and does not need to be installed..\n\n\nYou can supplement these with the Markdown linting extension and a range of other tools.\nOnce this is all installed, you start up your Docker container (as above) and then tell VSCode to connect to that container using the instructions provided.\nOnce you’ve gone through this once it should be fairly straightforward on subsequent runs. At that point you can browse to the notebooks (which are usually being mounted from your own machine) and run them as if you were doing all of this within the Docker container. It’s kind of mind-melting but pretty cool.\n\n\nConnect\nUse the Remote Containers icon () to bring up the ‘open’ menu.\n\n\n\nThe Remote Containers Dialogue\n\n\n\n\nAttach\nChoose the Attach to Running Container... option to list active Docker containers.\n\n\n\nAttach to a running container\n\n\nIn this screenshot we’re running one container named fsds that was built from the jreades/sds:2022 image. Your container may have a different name (e.g. sds2024) but the image should be named jreades/sds:2024 or `jreades/sds:2024-silicon:\n\n\n\nThe list of running containers\n\n\n\n\nAttached!\nIf all has gone well, then a new window should open and you’ll notice one small, but significant change:\n\n\n\nAn attached workspace\n\n\nVSCode confirms that this window is now connected to the fsds container1:\n\n\n\nRunning on a Container\n\n\n\n\nOpen Sesame\nNow, if we try to open a file/folder under the open menu (), you’ll notice that we’re not browsing ‘our computer’ any more! Instead, we’re browsing files on the Docker container.\n\n\n\nOpening files on the container\n\n\nSo how do we find the notebooks? Well, when we launched the container we had this line:\n  -v \"$(pwd):/home/jovyan/work\" \\\nThat told Docker to connect the current working directory (where you ran the command) to /home/jovyan/work on the container. So anything under /home/jovyan/work is actually a file that can be found on our computer. Below, you can see that I’ve browsed to the fsds/practicals directory on my computer and am now ready to start running (and editing) my notebooks using an IDE instead of JupyterLab’s web interface:\n\n\n\nNotice the path on the container\n\n\n\n\nExtensions\nYou need to install the same VSCode extensions that you’d use when running Python locally on your computer into the ‘remote’ container. VSCode will do a pretty good job prompting you, but you’ve got the list above and can also seem them (notice I’ve selected CONTAINER) on the left-hand Extensions () menu in the screenshot below:\n\n\n\nExtensions installed in Container\n\n\nOnce the extensions are installed, provided that you use the same startup command each time (and don’t change the name of the container from fsds) those extensions should be ready-to-go and you won’t need to reinstall again.\n\n\nSuccess!\nAnd here we go…\n\n\n\nRunning code in a container",
    "crumbs": [
      "Advanced Topics"
    ]
  },
  {
    "objectID": "docker/advanced.html#footnotes",
    "href": "docker/advanced.html#footnotes",
    "title": "Advanced Topics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRemember that your container may be called something else, like sds2024, but that doesn’t matter so long as you are using the right image (e.g. jreades/sds:2024). You can name the container anything at start-up using --name &lt;your_chosen_name&gt; and if you don’t provide one then Docker will make one up.↩︎",
    "crumbs": [
      "Advanced Topics"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA’s Urban Spatial Science Platform",
    "section": "",
    "text": "In order to get you started on your spatial and data science ‘journey’ you will need to follow the guidance provided on the pages we’ve linked to below. These are divided into three sections:"
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "CASA’s Urban Spatial Science Platform",
    "section": "Requirements",
    "text": "Requirements\nBefore trying to do anything else you should review the ‘requirements’. As part of that, you’ll need to complete the basic health check, which also includes our recommendations if you are considering buying a new computer when you start your studies. Once you know that your machine and operating system are up-to-date, you should install the basic utilities that will enable you to complete installation of the programming environment. We also provide information about Code Camp which is a self-paced introduction to the fundamentals of programming in Python."
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "CASA’s Urban Spatial Science Platform",
    "section": "Setup",
    "text": "Setup\nInstalling the computing environment entails thinking not just about how you run code, but also how you manage it and document it. In fact, it’s possible to run code without installing anything at all, but by signing up for, installing, or configuring these services now you know that you are ready to roll!"
  },
  {
    "objectID": "index.html#soft-skills",
    "href": "index.html#soft-skills",
    "title": "CASA’s Urban Spatial Science Platform",
    "section": "Soft-Skills",
    "text": "Soft-Skills\nIt might seem strange to have a section on soft-skills as part of our ‘preparing to run the Urban Spatial Science platform web site, but MSc programmes are a ’step up’ in terms of independent study, and so knowing how to read, how to think, how to ask for help and how to study effectively is almost as important as being able to run the code. Almost. Moreover, the skills we discuss here aren’t specific to any one module so we’ve put them here as part of your orientation."
  },
  {
    "objectID": "index.html#to-dos",
    "href": "index.html#to-dos",
    "title": "CASA’s Urban Spatial Science Platform",
    "section": "To Dos",
    "text": "To Dos\nNone outstanding."
  },
  {
    "objectID": "index.html#citing",
    "href": "index.html#citing",
    "title": "CASA’s Urban Spatial Science Platform",
    "section": "Citing",
    "text": "Citing\n@software{uss:2024,\n  author = {Reades, Jon},\n  title = {\\texttt{sds_env}: A containerised platform for Urban Spatial Science},\n  url = {https://github.com/jreades/sds_env/},\n  version = {2023},\n  date = {2023-10-01},\n}\nThis draws heavily on Dani Arribas-Bel’s work for Liverpool.\n\n\n\nDOI\n\n\n@software{hadoop,\n  author = {{Dani Arribas-Bel}},\n  title = {\\texttt{gds_env}: A containerised platform for Geographic Data Science},\n  url = {https://github.com/darribas/gds_env},\n  version = {3.0},\n  date = {2019-08-06},\n}"
  },
  {
    "objectID": "req/index.html",
    "href": "req/index.html",
    "title": "Requirements",
    "section": "",
    "text": "Before trying to do anything else please complete the basic health check, which also includes our recommendations if you are considering buying a new computer when you start your studies. Once you know that your machine and operating system are up-to-date, you should install the basic utilities that will enable you to complete installation of the programming environment. We also provide information about Code Camp which is a self-paced introduction to the fundamentals of programming in Python."
  },
  {
    "objectID": "setup/jupyter_hub.html",
    "href": "setup/jupyter_hub.html",
    "title": "Using UCL JupyterHub",
    "section": "",
    "text": "Start up the UCL VPN.\nConnect to JupyterHub\nAuthenticate using UCL credentials.\nCreate a new terminal: File &gt; New &gt; Terminal"
  },
  {
    "objectID": "setup/jupyter_hub.html#creating-an-environment-staff",
    "href": "setup/jupyter_hub.html#creating-an-environment-staff",
    "title": "Using UCL JupyterHub",
    "section": "",
    "text": "Start up the UCL VPN.\nConnect to JupyterHub\nAuthenticate using UCL credentials.\nCreate a new terminal: File &gt; New &gt; Terminal"
  },
  {
    "objectID": "setup/jupyter_hub.html#setting-up-the-environment",
    "href": "setup/jupyter_hub.html#setting-up-the-environment",
    "title": "Using UCL JupyterHub",
    "section": "Setting Up the Environment",
    "text": "Setting Up the Environment\nThe ISD instructions are not correct in the sense that the use of a symlink can cause problems and duplicated environments down the line. Anyway, type the following, but note that you need to replace {replace_this_with_group_name} with the appropriate group name (this will be obvious once logged in and you can run ls /shared/groups/):\ncourse_name=\"casa0013\"\ngroup_name=\"{replace_this_with_group_name}\"\nconda config --add envs_dirs /shared/groups/${group_name}/casa\ncurl -o /tmp/${course_name}.yml https://raw.githubusercontent.com/jreades/sds_env/master/conda/environment_py.yml\nconda env create -p /shared/groups/${group_name}/casa -f /tmp/${course_name}.yml"
  },
  {
    "objectID": "setup/jupyter_hub.html#tweaks-to-environyment_py.yml",
    "href": "setup/jupyter_hub.html#tweaks-to-environyment_py.yml",
    "title": "Using UCL JupyterHub",
    "section": "Tweaks to environyment_py.yml",
    "text": "Tweaks to environyment_py.yml\nTwo shortcomings in the existing approach of generating environment_py.yml were identified and need to be tweaked in the Makefile:\n\nRemove anything with linux in it\nRemove version from gitpython.\nRemove python-graphviz entirely.\n\nAdditional issues may exist with replication to non-Linux systems."
  },
  {
    "objectID": "setup/no_install.html",
    "href": "setup/no_install.html",
    "title": "No Install Options",
    "section": "",
    "text": "The following options provide alternatives for those who are unable to install the full programming environment on their main computer and would otherwise be unable to continue with the module. Each of these has pros and cons but they allow you to run code ‘in the cloud’ and so mean that any internet-connected device can be used to write and run code.",
    "crumbs": [
      "No Install Options"
    ]
  },
  {
    "objectID": "setup/no_install.html#ucl-jupyterhub",
    "href": "setup/no_install.html#ucl-jupyterhub",
    "title": "No Install Options",
    "section": "UCL JupyterHub",
    "text": "UCL JupyterHub\n\n\n\n\n\n\nConfiguration for Staff\n\n\n\nPlease see the JupyterHub page for information about configuring a new environment.\n\n\nTo connect to JupyterHub:\n\nStart up the UCL VPN.\nConnect to JupyterHub\nAuthenticate using your UCL credentials.\nIf you see a URL that ends in tree? please replace this with lab? to get the JupyterLab interface and not the original Jupyter Notebook interface (you can bookmark this page once it opens).\nCreate a new terminal: File &gt; New &gt; Terminal\n\nNote that you need to replace {group_name} with the appropriate group role (this value will be obvious once you’re logged in and can run ls /shared/groups/ in the Terminal):\nconda config --append envs_dirs /shared/groups/{group_name}/casa\njupyter contrib nbextension install --user",
    "crumbs": [
      "No Install Options"
    ]
  },
  {
    "objectID": "setup/no_install.html#google-colab",
    "href": "setup/no_install.html#google-colab",
    "title": "No Install Options",
    "section": "Google Colab",
    "text": "Google Colab\nGoogle’s Colaboratory is an easy way to get started without needing to install anything, while still being able to save your work. This approach will work well for the first few weeks, up to the point where we start loading larger data sets that require more memory than Google’s free tier provides. At that point you’ll either need to start sampling from the full data set, or you’re back to Docker!\nHere’s how to get started with Colab:\n\nGo to Google’s Colab site and sign in using your Google account details (or create an account if you don’t already have one).\nIf you are trying to clone a practical from Foundations then: choose File then Open and select the GitHub tab from the open options (it’s between Google Drive and Upload).\nEnter the following URL: https://github.com/jreades/fsds.\nYou should now see a list of notebooks to choose from – select the appropriate one from the sequence and click Open in Colab.\nYou will need to trust the notebook in order to run it.\n\nWhen you are done for the day you can save the notebook to your Google Drive – to re-run that notebook you can just load it from Google Drive, rather than going back to GitHub, but remember that you need to re-run all the cells up to the point where you saved the notebook. Being able to save and re-run a notebook is the main difference from Binder.",
    "crumbs": [
      "No Install Options"
    ]
  },
  {
    "objectID": "setup/no_install.html#binder",
    "href": "setup/no_install.html#binder",
    "title": "No Install Options",
    "section": "Binder",
    "text": "Binder\nWhile we support Binder for Code Camp, this is not a platform that we are supporting as part of our masters programme since it is impossible to save your work without downloading the notebook each time.",
    "crumbs": [
      "No Install Options"
    ]
  },
  {
    "objectID": "skills/attention.html",
    "href": "skills/attention.html",
    "title": "How to Pay Attention",
    "section": "",
    "text": "Learning to code is hard work and I’m pretty sure that I’m a lot less exciting than your average YouTube star. So if I have to compete with YouTube (or with your friends on WhatsApp, Snapchat, WeChat, or whatever) for your attention then I’ll probably lose. And your computer and phone are designed to distract you because they are interested in engagement—they don’t care that you should be engaging with your studies, they want you to pick them up and use them. This is why you get so many notifications!",
    "crumbs": [
      "How to Pay Attention"
    ]
  },
  {
    "objectID": "skills/attention.html#evidence-base",
    "href": "skills/attention.html#evidence-base",
    "title": "How to Pay Attention",
    "section": "Evidence Base",
    "text": "Evidence Base\nThere is plenty of evidence to back this up:\n\nDistractions make learning harder\nNearly half of students distracted by technology\nThe effect of cellphones on attention and learning…\nDistractions make retaining info harder\nThe interrupted learner: how distractions during live and video lectures influence learning outcomes",
    "crumbs": [
      "How to Pay Attention"
    ]
  },
  {
    "objectID": "skills/attention.html#managing-distraction",
    "href": "skills/attention.html#managing-distraction",
    "title": "How to Pay Attention",
    "section": "Managing Distraction",
    "text": "Managing Distraction\nSo my recommendations for studying (online or offline) are:\n\nTurn off as many notifications as possible. On the Mac there is a ‘Do not disturb’ setting that you can enable in the Notifications section of your System Preferences. You can set it to turn on by time, and also add a setting short-cut to your ‘Notification Centre’ (upper-right corner of your desktop).\nUninstall messaging apps that you cannot turn off. If quitting the app disables notifications then that’s fine. But if you can’t disable notifications then I’d suggest uninstalling the messaging app entirely. Facebook Messenger, for instance, is a massive memory-hog and usually available on the desktop UI anyway.\nBlock access to distracting web sites. There are a number of tools that you can set up to block access to Facebook and other social media sites at set times of day. My Achilles heel is the news: if I’m struggling I tend to read news articles, so if I really need to make sure I don’t have the browser open to the home page of my favourite news sites.\nUse time-blocking. This is a well understood approach to managing your time as detailed, for example, here and used by many academics (who get even more email than you!).\nWork out a schedule. It’s a lot easier to avoid distractions if you have a routine that enables you to say “OK, I will work from 9–11 and then have a look at my email.” It is easier to be in control if you can give yourself rewards later. And if you get into a routine, as a parent probably suggested when you were an undergraduate (certainly mine did and I ignored them), then you’ll find that your ‘productivity’ improves dramatically. My mother was right, dammit.",
    "crumbs": [
      "How to Pay Attention"
    ]
  },
  {
    "objectID": "skills/attention.html#the-problem-of-no-breaks",
    "href": "skills/attention.html#the-problem-of-no-breaks",
    "title": "How to Pay Attention",
    "section": "The Problem of No Breaks",
    "text": "The Problem of No Breaks\nFrequent distraction is one problem, but (in a sense) getting enough distraction is another. As this piece suggests, it’s also important that you give yourself downtime between Zoom/Teams/whatever sessions. I will try to remember to bake these into our ‘lectures’, but you should also suggest breaks if you feel yourself flagging! This also applies, however, to your wider degree: Masters degrees are intense and you need to give yourself permission for a timeout… stepping away from the computer and going for a walk, doing some knitting, taking a weekend to visit another city or go on a camping trip, whatever floats your boat!",
    "crumbs": [
      "How to Pay Attention"
    ]
  },
  {
    "objectID": "skills/index.html",
    "href": "skills/index.html",
    "title": "Soft Skills",
    "section": "",
    "text": "We think that there are some fundamentally important soft-skills for successfully completing a MSc: we try to teach these in our modules as well, but we think it’s useful to flag them here as well:\n\nPaying attention: learning how to deal with distractions is essential to maintaining focus and retaining the infromation you’re taking in through reading and coding.\nReading: too many students try to read either everything or nothing when they should be doing something in between, so we’ve tried to collect some ideas on how to read to help you get started.\nThinking: the other big challenge for many students is learning how to approach literature and learning critically so that you learn how to integrate ideas and form your own. Learning how to think for yourself is essential.\nAsking for help: just because we want you to become an organised, motivated self-learner does not mean we don’t want to help you achieve this! Suffering in silence is not going to get you extra marks, so we’ve also offered tips on how to ask for help in a way that is most likely to get you what you need.\n\nThese pages are by no means complete, nor will the advice they offer work for everyone, but it is absolutely essential that you are as aware of how you learn as you are of what you are learning. The skill of ‘meta-cognition’ is one that will allow you to carry on learning effectively for the rest of your life!"
  },
  {
    "objectID": "skills/thinking.html",
    "href": "skills/thinking.html",
    "title": "How to Think",
    "section": "",
    "text": "Another challenge for many students is that they want the ‘right’ answer to how to do things. There’s more academic literature on this, but for a thought-provoking look at why it might be a good idea for us to make your life hard then What IKEA and Our Education System Have in Common is an easy read.\nHere’s the summary:\n\nIKEA is easy, but you don’t learn anything.\nIKEA is about getting things done/finishing.\nIKEA is convenient, but it’s not creative.\nIKEA is standardised, but it is actually primed for hacking.\n\nBut there is a great response to the original post that adds nuance to this:\n\nThe thing to keep in mind, though, is that following recipies is how we learn skills to start with. If you were teaching someone to cook, for example, you wouldn’t throw the person into the kitchen and tell them to be creative with the food. Instead, you would teach them to follow recipies so that they can practice skills, and learn how to properly balance flavours and textures. Then, when they’ve mastered some recipies, you teach them how to mix up and re-combine recipies, and eventually come up with their own.",
    "crumbs": [
      "How to *Think*"
    ]
  },
  {
    "objectID": "skills/thinking.html#why-am-i-making-this-hard-for-you",
    "href": "skills/thinking.html#why-am-i-making-this-hard-for-you",
    "title": "How to Think",
    "section": "",
    "text": "Another challenge for many students is that they want the ‘right’ answer to how to do things. There’s more academic literature on this, but for a thought-provoking look at why it might be a good idea for us to make your life hard then What IKEA and Our Education System Have in Common is an easy read.\nHere’s the summary:\n\nIKEA is easy, but you don’t learn anything.\nIKEA is about getting things done/finishing.\nIKEA is convenient, but it’s not creative.\nIKEA is standardised, but it is actually primed for hacking.\n\nBut there is a great response to the original post that adds nuance to this:\n\nThe thing to keep in mind, though, is that following recipies is how we learn skills to start with. If you were teaching someone to cook, for example, you wouldn’t throw the person into the kitchen and tell them to be creative with the food. Instead, you would teach them to follow recipies so that they can practice skills, and learn how to properly balance flavours and textures. Then, when they’ve mastered some recipies, you teach them how to mix up and re-combine recipies, and eventually come up with their own.",
    "crumbs": [
      "How to *Think*"
    ]
  },
  {
    "objectID": "skills/thinking.html#thinking-like-a-programmer",
    "href": "skills/thinking.html#thinking-like-a-programmer",
    "title": "How to Think",
    "section": "Thinking Like a Programmer",
    "text": "Thinking Like a Programmer\nFor the record, there are many things that can’t be solved by code or coders, but there are many things that can be tackled by learning to think like a programmer. This can include:\n\nUnderstanding: make sure that you actually understand the problem before you try to solve it. Try to explain it to someone else. Try to explain it to a pet or stuffed animal. Write it down. You may feel silly doing some of these things, but saying it/writing it forces you to organise your thoughts and often gives you the answer halfway through the explanation.\nPlanning: “Given X, what steps do I need to achieve Y?” You can start with comments, bullet points, or whatever format helps you to get the skeleton of an answer in place before you spend ages writing the first few lines of code or the first few lines of your essay. Markdown is good here!\nDividing: never try to solve a hard problem in one go. Break it down into little steps. Easy steps. Do the easiest one first (if you can separate it out from the first one). Check your solution works for that part. Take the next step. Check the two steps work together. Build from there. As programmers and Venture Capitalists would tell you: iterate! Same for an essay or written submission.\nUnsticking: try to stay curious rather than getting angry or frustrated. Debugging is a step-by-step process: comment things out, add print statements, break it back down again into the basics and gradually re-add pieces until you can see where it all breaks.\nPracticing: I like this quote “Practice. Practice. Practice. It’ll only be a matter of time before you recognize that ‘this problem could easily be solved with .’”\n\n\n“The art of debugging is figuring out what you really told your program to do rather than what you thought you told it to do.” — Andrew Singer\n\nOn a more practical level, here are common mistakes made by new programmers.",
    "crumbs": [
      "How to *Think*"
    ]
  },
  {
    "objectID": "skills/thinking.html#what-this-means-for-you",
    "href": "skills/thinking.html#what-this-means-for-you",
    "title": "How to Think",
    "section": "What This Means for You",
    "text": "What This Means for You\n\nWe will not give you the answer. This will be frustrating and annoying (particularly when you are already frustrated that something is not working) but by asking you questions we will try to teach you to solve problems for yourself.\nIf you keep asking us the same questions you will get increasingly abrupt answers. You should be scared to ask us the same question for the 20th time. You should not be scared to admit that you’re struggling with something.\nSometimes there is no answer! Every year the data changes. The policies and issues change. I teach things a little differently. This is much more like the real world and sometimes I don’t know what we’ll find when we start coding.\nYou need to work out how you learn best.\nYou will need to think critically about what you are doing. There’s a good article on How to write better essays which leads on to a blog on how to write better undergraduate essays (see above). You’re obviously not undergraduates any more and we expect more of you, but as a starting point this is a good one, especially for those of you who are new to the UK way of teaching and learning.",
    "crumbs": [
      "How to *Think*"
    ]
  },
  {
    "objectID": "req/base.html",
    "href": "req/base.html",
    "title": "Base Utilities",
    "section": "",
    "text": "In order to access the majority of the features that this module uses, you will need to install several ‘base’ utilities:",
    "crumbs": [
      "Base Utilities"
    ]
  },
  {
    "objectID": "req/base.html#windows-linux-shell",
    "href": "req/base.html#windows-linux-shell",
    "title": "Base Utilities",
    "section": "Windows + Linux + Shell",
    "text": "Windows + Linux + Shell\n\n\n\n\n\n\nCreating a Linux User\n\n\n\nIf you want to install a full Linux distribution (e.g. because you want to do more than just run Docker) then make sure you set up a new Linux user and do not end up running everything as root.\n\n\nTo make full use of WSL2 and Linux (if you want to do more than just use Docker) you will need to familiarise yourself with how having two operating systems that can talk to each other works. That is covered in the next section. This will actually be useful for understanding how Docker works, as it can be profoundly confusing.\nThe behaviour of the ‘shell’ (command line) is quite confusing because, with WSL2, you effectively end up with two ‘home’ directories: one for your Windows user, and one for your new Ubuntu user. Starting a Linux shell/command line puts you in your Linux home directory (the username may be completely different from your Windows username). Starting a Windows shell/command line puts you in your Windows home directory (again, the username may be completely different from your Linux username).\nSo the first, and perhaps most important, thing is understanding where ‘data’ is being stored:\n\nUnder Linux the user directory is apparently something like: \\\\wsl$\\&lt;DistroName&gt;\\home\\&lt;UserName&gt;\\ but you can usually get it by simply typing cd $HOME and then pwd when starting a new Linux shell.\nUnder Windows the user directory is: C:\\Users\\&lt;UserName&gt;\\ or /mnt/c/Users/&lt;UserName&gt;/, and you can often simply type pwd when opening a new Windows shell.\n\nSo these are different locations on your computer’s hard drive, and you will not see your Linux files in your Windows Home Directory and vice versa. To make it easy to switch between the two, I found this page on Microsoft’s web site that goes through some of the post-WSL2 installation steps, but see especially the additional page on Windows Terminal configuration.\nSlightly confusingly, you can run Linux commands directly from Windows, usually be adding wsl in front of the Linux command (e.g. wsl ls *.csv from Windows, where in Linux the command would be ls *.csv).\nTo make it easy to move from the Linux side of your machine to the Windows machine you can also do this:\n\nWork out where your CASA files are stored on the Windows side (see above: /mnt/c/Users/&lt;UserName&gt;/My\\ Documents/CASA/... where &lt;UserName&gt; is your Windows user name).\ncd to this location and type pwd to output the full path to the CASA directory.\nCopy this.\nNow start a Linux shell and run the following command once (you do not need to do it ever again): echo \"export WIN_HOME=\\\"/mnt/c/Users/.../CASA/\\\"\" &gt;&gt; $HOME/.bashrc. Replace the ... with the rest of the actual path! The \\\" is very important, don’t try to change those!\nNow run source .bashrc and you should see no errors.\n\nOnce you have done this you will have added a single line to your .bashrc file in Linux. This will create a ‘shortcut’ for bash in Linux. From here on out you should be able to type cd $WIN_HOME and move immediately over to the CASA directory on the Windows side. This will save having to remember (and type) the Windows path each time.",
    "crumbs": [
      "Base Utilities"
    ]
  },
  {
    "objectID": "skills/How_to_Succeed.html#assigned-readings",
    "href": "skills/How_to_Succeed.html#assigned-readings",
    "title": "How to Succeed",
    "section": "Assigned Readings",
    "text": "Assigned Readings\n\n\n\nRead widely\nLook at the reading list (readingslists.ucl.ac.uk)\nCheck the library for availability\nThink critically1\n\n\n\n\n\nKnowing where to find the best material is vital to success in your degree\n\nJust because it was published, it doesn’t mean it’s correct!"
  },
  {
    "objectID": "skills/How_to_Succeed.html#ucl-library",
    "href": "skills/How_to_Succeed.html#ucl-library",
    "title": "How to Succeed",
    "section": "UCL Library",
    "text": "UCL Library\nThe UCL Library Services Website is a very good place to start if you want to find books located in UCL www.ucl.ac.uk/library/.\n\nUCL has lots of libraries – you will probably find most useful items in the UCL Science Library, the Bartlett Library or we have a small CASA library where you can borrow books."
  },
  {
    "objectID": "skills/How_to_Succeed.html#google-scholar",
    "href": "skills/How_to_Succeed.html#google-scholar",
    "title": "How to Succeed",
    "section": "Google Scholar",
    "text": "Google Scholar\nFind academic articles using Google Scholar (scholar.google.com), it’s great! Much better than a standard google search for finding books, journal articles, working papers etc."
  },
  {
    "objectID": "skills/How_to_Succeed.html#google-scholar-2",
    "href": "skills/How_to_Succeed.html#google-scholar-2",
    "title": "How to Succeed",
    "section": "Google Scholar (2)",
    "text": "Google Scholar (2)\nYou can also link Google scholar to the UCL library, so if you find an article you might like to read Google will give you the UCL link to access it!"
  },
  {
    "objectID": "skills/How_to_Succeed.html#web-of-science",
    "href": "skills/How_to_Succeed.html#web-of-science",
    "title": "How to Succeed",
    "section": "Web of Science",
    "text": "Web of Science\nWeb of Science is also an excellent search tool for finding academic articles. It will automatically link to items in the UCL catalogue as you need to log in via your institutional credentials."
  },
  {
    "objectID": "skills/How_to_Succeed.html#read-widely",
    "href": "skills/How_to_Succeed.html#read-widely",
    "title": "How to Succeed",
    "section": "Read Widely?",
    "text": "Read Widely?\n\n\n\nSet the Scene Readings\n\n\nUN Sustainable Development Goals\nC40 cities\nGive cities a seat at the top table, Acuto 2016\nScientists must have a say in the future of cities, McPherson 2016\nGlobal science for city policy, Acuto 2018\nLondon Plan\nNew Urban Agenda\n\n\n\nTechnical Readings\n\nThe detail of the method you are using = where, how +why"
  },
  {
    "objectID": "skills/How_to_Succeed.html#why-it-matters",
    "href": "skills/How_to_Succeed.html#why-it-matters",
    "title": "How to Succeed",
    "section": "Why it Matters",
    "text": "Why it Matters\nBeing able to write well is absolutely key to success.\nIf you are unable to present your argument well in English, your grades will suffer accordingly.\nPoor quality of written English a contributing factor in failed CASA dissertations in the past.\nThere are a number of factors which could lead to poor written work, but fortunately there are solutions to all of them…"
  },
  {
    "objectID": "skills/How_to_Succeed.html#esl",
    "href": "skills/How_to_Succeed.html#esl",
    "title": "How to Succeed",
    "section": "ESL",
    "text": "ESL\nIf English isn’t your first language the UCL Centre For Languages & International Education has taught courses which run during the term (www.ucl.ac.uk/languages-international-education) and there are also mobile apps (www.ucl.ac.uk/english-usage/apps/)\nAlso, the Writing Lab (www.ucl.ac.uk/writing-lab/)!"
  },
  {
    "objectID": "skills/How_to_Succeed.html#the-writing-lab",
    "href": "skills/How_to_Succeed.html#the-writing-lab",
    "title": "How to Succeed",
    "section": "The Writing Lab",
    "text": "The Writing Lab"
  },
  {
    "objectID": "skills/How_to_Succeed.html#academic-english",
    "href": "skills/How_to_Succeed.html#academic-english",
    "title": "How to Succeed",
    "section": "‘Academic’ English",
    "text": "‘Academic’ English\nDeveloped through the programme and modules.\nOther resources:\n\nUCL Transition Study Skills\nUCL Institute of Education has excellent online guides\n\nMOOCs are available elsewhere:\n\nE.g. EdX!"
  },
  {
    "objectID": "skills/How_to_Succeed.html#how-to-reference",
    "href": "skills/How_to_Succeed.html#how-to-reference",
    "title": "How to Succeed",
    "section": "How to Reference",
    "text": "How to Reference\nVariety of academic referencing styles, but we prefer Harvard referencing:\n\nBao (2003) compares this population group with…\nAn earlier study (Bao, 2003) concluded that…\nSmith et al. (2006) conducted a situation analysis…\nAl-Hasani (2003, p27) stated that “this method is more suitable for analysis of complex emergency situations”"
  },
  {
    "objectID": "skills/How_to_Succeed.html#use-a-reference-manager",
    "href": "skills/How_to_Succeed.html#use-a-reference-manager",
    "title": "How to Succeed",
    "section": "Use a Reference Manager",
    "text": "Use a Reference Manager\nReference management software is BRILLIANT so use it!\nZotero is FREE and works across multiple platforms."
  },
  {
    "objectID": "skills/How_to_Succeed.html#zotero",
    "href": "skills/How_to_Succeed.html#zotero",
    "title": "How to Succeed",
    "section": "Zotero",
    "text": "Zotero\nAdd citations to your library with ONE CLICK from your (Firefox or Chrome) browser.\nWill automatically detect whether a journal article, book, webpage etc."
  },
  {
    "objectID": "skills/How_to_Succeed.html#zotero-2",
    "href": "skills/How_to_Succeed.html#zotero-2",
    "title": "How to Succeed",
    "section": "Zotero (2)",
    "text": "Zotero (2)\nCitations can be imported straight into Microsoft Word / Google docs / Markdown using a ‘plugin’.\nZotero will then build your alphabetical reference list at the end according to the style you choose!"
  },
  {
    "objectID": "skills/How_to_Succeed.html#zotero-3",
    "href": "skills/How_to_Succeed.html#zotero-3",
    "title": "How to Succeed",
    "section": "Zotero (3)",
    "text": "Zotero (3)\nYour personal reference ‘library’ is stored online and locally on your computer (and synced) so you can access from anywhere. Free backups!\nOther reference management software such as EndNote is available (EndNote is good, but quite pricey…)\n** Big hint #1 – DOWNLOAD ZOTERO TODAY AND PRACTICE USING IT – IT WILL MAKE YOUR LIFE ABOUT 300% BETTER**"
  },
  {
    "objectID": "skills/How_to_Succeed.html#plagiarism",
    "href": "skills/How_to_Succeed.html#plagiarism",
    "title": "How to Succeed",
    "section": "Plagiarism",
    "text": "Plagiarism\n\nPerhaps the most serious academic offense and one that could lead to you failing your degree!\nPassing off someone else’s work as your own.\nWhether deliberately or accidentally (e.g. forgetting to cite something you copied from a source)\nYou will get credit every time you reference the work of someone you have read – so make sure you cite them correctly!\nWe are all experts at spotting plagiarism (indeed it can be a bit of a sport for lecturers), so DON’T DO IT!!\n\nSee my last point on Zotero to help with this!"
  },
  {
    "objectID": "skills/How_to_Succeed.html#some-examples",
    "href": "skills/How_to_Succeed.html#some-examples",
    "title": "How to Succeed",
    "section": "Some Examples",
    "text": "Some Examples\n\nStudents try to change enough words to minimise their Turnitin score, but we’ve been doing this for many years and normally tell.\nStudents submit .zip files in attempt to avoid their work going through Turnitin, but all work goes through Turnitin.\nStudents screenshot figures from web sources, or even published papers, but when we check they can’t show how they produced them.\nAn applicant provided a work sample based on the town of Stowe, Vermont USA. We recognised that they had directly copied an ArcGIS tutorial for the spatial analyst toolbox."
  },
  {
    "objectID": "skills/How_to_Succeed.html#test-yourself",
    "href": "skills/How_to_Succeed.html#test-yourself",
    "title": "How to Succeed",
    "section": "Test Yourself",
    "text": "Test Yourself\nMany cases of plagiarism are accidental, but this is not an excuse.\nYou must all complete the referencing and plagiarism quiz on Moodle. We will log all people who have and haven’t completed and will chase you if you don’t complete it.\nLog onto the CASA page (where these slides will be along with other induction week materials) and complete the short quiz."
  },
  {
    "objectID": "skills/How_to_Succeed.html#the-solution",
    "href": "skills/How_to_Succeed.html#the-solution",
    "title": "How to Succeed",
    "section": "The Solution?",
    "text": "The Solution?\nIf in doubt, ask."
  },
  {
    "objectID": "skills/How_to_Succeed.html#cheating",
    "href": "skills/How_to_Succeed.html#cheating",
    "title": "How to Succeed",
    "section": "Cheating",
    "text": "Cheating\n\nWe Promise You An ‘A’! Promise!"
  },
  {
    "objectID": "skills/How_to_Succeed.html#cheating-2",
    "href": "skills/How_to_Succeed.html#cheating-2",
    "title": "How to Succeed",
    "section": "Cheating (2)",
    "text": "Cheating (2)\n\nIf you are caught using one of these companies the penalties are harsh: they typically include immediate expulsion and the withholding any qualification you might have qualified for!\nYou run the very real risk of being blackmailed throughout your degree and career.\nThe types of assignments we set are difficult for these companies to handle because they don’t have the necessary skills to complete them to a high standard."
  },
  {
    "objectID": "skills/How_to_Succeed.html#get-help",
    "href": "skills/How_to_Succeed.html#get-help",
    "title": "How to Succeed",
    "section": "Get Help!",
    "text": "Get Help!\nWe recognise that there are many reasons students might plagiarise or cheat, for example:\n\nLeaving the work until the last minute\nFeel overwhelmed and panicking\nHaving to dedicate time to over personal issues (e.g. health or family)\n\nTalk to the staff (your personal tutor, the departmental tutor, the module leader, anyone) if you are facing issues that could be affecting your studies."
  },
  {
    "objectID": "docker/index.html",
    "href": "docker/index.html",
    "title": "Using Docker",
    "section": "",
    "text": "Docker is ‘virtualisation’ tool that allows you to run ‘virtual machines’ on your computer’s ‘host’ operating system. That’s a lot of new, probably meaningless words. If you’re one of those people who (understandably) likes to understand what’s going on then here’s how some people define it:\n\nGoogle on What is a virtual machine?\nVMWare on What is a virtual machine?\nMicrosoft on What is a virtual machine (VM)?\n\n\n\n\nSo in order to make use of Docker (and understand what’s happening when you get errors), it’s helpful to have some sense of what’s going on behind the scenes. You can click on the image below to make it larger, or you can download and print out a PDF version.\n\n\n\nSketch of Docker Usage\n\n\nHere’s what’s happening:\n\n\nYou issue the docker pull jreades/sds:2024 command to your computer, which turns around and asks Docker Hub for a copy of this image. Docker Hub responds by transferring a copy of the jreades/sds:2024 image to your computer. You now have a file containing all the instructions to set up and run a virtual machine on your computer.1\n\n\n\nYou issue the docker run ... jreades/sds:2024 ... command (which you’ll be running in a minute) from your computer, and this tells Docker to use the jreades/sds:2024 image as a template for creating a container called sds20242. sds2024 will do whatever it was told to do by its creator. This could be wait to run Python code, start up a database, serve web pages, the list is practically endless. But sds2024 is read-only, although you can make changes to the container while it’s running, as soon as you shut it down those changes are lost. So you cannot break a Docker image, only a container. And if you do that, you delete the container and start a new one from the image… we can cover this if you ever do it.\nAs part of the docker run command, we also told Docker what resources the container could access. There are two main types of resources for our purposes:\n\nA mount point which is a part of your computer’s hard drive that Docker can use to write things down permanently. We use $(pwd), which is short-hand for print working directory and refers to the ‘place’ on your computer where we issued the docker run command. We tell Docker to connect this to a directory called work (which resides in /home/jovyan/) on the sds2024 container. This allows you to share data between the container and your computer, and for changes to be saved when you shut down Docker.\nOne or more ports which are like channels on a radio where the container can talk to other computers (including yours). In this case, we connect port 8888 on sds2024 to port 8888 on your computer. And that is why you have to tell your browser to go to localhost:8888 to access Jupyter Lab.\n\n\n\n\nNow when you type things into the browser and tell code to ‘run’, what’s actually happening is that your computer is forwarding the request to the container, which does its thing, updates the web page, and this change is then forwarded back to you via the browser.\n\n\n\nIn the next section you’ll see the full Docker run command, here we just want to focus on the most important options (each -X is an option) for most users:\n\n-v: this specified the point on your hard drive that the sds2024 can use. By default we use $(pwd) which means ‘use the location where the docker run command was executed. You can also ’hard code’ this to something like /Users/&lt;your username&gt;/Documents/casa/fsds/ if you always want to use the same location.\n-p: this specified the channel (or port) on which the web browser can talk to the sds2024.\njreades/sds:2024: this specified the image we wanted to use"
  },
  {
    "objectID": "docker/index.html#understanding-docker",
    "href": "docker/index.html#understanding-docker",
    "title": "Using Docker",
    "section": "",
    "text": "Docker is ‘virtualisation’ tool that allows you to run ‘virtual machines’ on your computer’s ‘host’ operating system. That’s a lot of new, probably meaningless words. If you’re one of those people who (understandably) likes to understand what’s going on then here’s how some people define it:\n\nGoogle on What is a virtual machine?\nVMWare on What is a virtual machine?\nMicrosoft on What is a virtual machine (VM)?\n\n\n\n\nSo in order to make use of Docker (and understand what’s happening when you get errors), it’s helpful to have some sense of what’s going on behind the scenes. You can click on the image below to make it larger, or you can download and print out a PDF version.\n\n\n\nSketch of Docker Usage\n\n\nHere’s what’s happening:\n\n\nYou issue the docker pull jreades/sds:2024 command to your computer, which turns around and asks Docker Hub for a copy of this image. Docker Hub responds by transferring a copy of the jreades/sds:2024 image to your computer. You now have a file containing all the instructions to set up and run a virtual machine on your computer.1\n\n\n\nYou issue the docker run ... jreades/sds:2024 ... command (which you’ll be running in a minute) from your computer, and this tells Docker to use the jreades/sds:2024 image as a template for creating a container called sds20242. sds2024 will do whatever it was told to do by its creator. This could be wait to run Python code, start up a database, serve web pages, the list is practically endless. But sds2024 is read-only, although you can make changes to the container while it’s running, as soon as you shut it down those changes are lost. So you cannot break a Docker image, only a container. And if you do that, you delete the container and start a new one from the image… we can cover this if you ever do it.\nAs part of the docker run command, we also told Docker what resources the container could access. There are two main types of resources for our purposes:\n\nA mount point which is a part of your computer’s hard drive that Docker can use to write things down permanently. We use $(pwd), which is short-hand for print working directory and refers to the ‘place’ on your computer where we issued the docker run command. We tell Docker to connect this to a directory called work (which resides in /home/jovyan/) on the sds2024 container. This allows you to share data between the container and your computer, and for changes to be saved when you shut down Docker.\nOne or more ports which are like channels on a radio where the container can talk to other computers (including yours). In this case, we connect port 8888 on sds2024 to port 8888 on your computer. And that is why you have to tell your browser to go to localhost:8888 to access Jupyter Lab.\n\n\n\n\nNow when you type things into the browser and tell code to ‘run’, what’s actually happening is that your computer is forwarding the request to the container, which does its thing, updates the web page, and this change is then forwarded back to you via the browser.\n\n\n\nIn the next section you’ll see the full Docker run command, here we just want to focus on the most important options (each -X is an option) for most users:\n\n-v: this specified the point on your hard drive that the sds2024 can use. By default we use $(pwd) which means ‘use the location where the docker run command was executed. You can also ’hard code’ this to something like /Users/&lt;your username&gt;/Documents/casa/fsds/ if you always want to use the same location.\n-p: this specified the channel (or port) on which the web browser can talk to the sds2024.\njreades/sds:2024: this specified the image we wanted to use"
  },
  {
    "objectID": "docker/index.html#installing-docker",
    "href": "docker/index.html#installing-docker",
    "title": "Using Docker",
    "section": "Installing Docker",
    "text": "Installing Docker\n\n\n\n\n\n\nEssential Topic\n\n\n\nThis next section is essential to running the sds2024 environment.\n\n\nDocker is a complex application doing very complex things. It’s not surprising that it can be a bit of a pain to install. But once installed, it’s a very powerful platform for ‘doing (spatial) data science’ that’s widely used in industry and, increasingly, academia.\nOne way to think of it as a ‘library’ of ready-made virtual computers that you can copy and use free-of-charge. If you’d like to know more about what Docker is and how it works, you can read more in the Understanding Docker section.\n\n\n\n\n\n\nWindows Users\n\n\n\nPlease ensure that you have installed WSL2 before installing Docker! If you cannot install WSL2 then please have a look at the ‘dealing with errors’ section.\n\n\nAfter you’ve downloaded Docker, you need to:\n\nInstall it – usually this will mean opening the image and either dragging it your Application folder (Mac) or running the installer (Windows)\nStart it up – double-click the Docker icon in your Applications folder to start Docker running.\nFinish setup – once Docker is finished starting up, you should see the login screen below. You do not need to create an account (notice Continue without signing in)\nOn all the subsequent questions you can Skip (upper-right corner) answering as well.\n\n\n\n\nDocker trying to trick you into creating an account\n\n\nYou must finish setting up before proceeding to the next step. You’ll know that you’re ready to move on when you see the ‘Docker Desktop’ window appear listing ‘downloaded images’ and ‘running containers’:\n\n\n\nDocker Desktop\n\n\nIf you didn’t see this then you will need to have a look at the ‘dealing with errors’ section."
  },
  {
    "objectID": "docker/index.html#testing-docker",
    "href": "docker/index.html#testing-docker",
    "title": "Using Docker",
    "section": "Testing Docker",
    "text": "Testing Docker\nTo test if Docker is installed correctly, you will need either the Terminal (macOS) or the Power Shell (Windows).\n\n\n\n\n\n\nCopy Code to Clipboard\n\n\n\nWhenever you see a ‘code block’ below, you will also see a ‘clipboard’ icon () in the right. Click that, and the code will be copied to your computer’s ‘clipboard’ so that you can then paste it into the Terminal or Power Shell. That will save you a lot of time and effort.\n\n\nDocker has provided a simple way to test if your installation is working correctly. You can run the following command in the Terminal or Power Shell:\ndocker run hello-world\nThis should output something like:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n478afc919002: Pull complete\nDigest: sha256:91fb4b041da273d5a3273b6d587d62d518300a6ad268b28628f74997b93171b2\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (arm64v8)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\nIf you see this message, then Docker is installed correctly and you can move on to the next step. If you see an error message, then you will need to have a look at the ‘dealing with errors’ section. Notice how there are several things happening:\n\nUnable to find image... locally – this is because the hello-world image is not (yet) stored on your computer.\nlatest: Pulling from library/hello-world – this is Docker downloading the hello-world image from the internet.\nPull complete – this is Docker telling you that it has finished downloading the image.\nHello from Docker! – this is the hello-world image running and telling you that Docker is working correctly.\n\nThere’s obviously a lot more to that message, but that’s the basic idea."
  },
  {
    "objectID": "docker/index.html#installing",
    "href": "docker/index.html#installing",
    "title": "Using Docker",
    "section": "Installing sds2024",
    "text": "Installing sds2024\nWe now need to download the sds2024 image that we use for teaching Foundations and Quantitative Methods. The image is the ‘template’ for running virtual machines (i.e. computers) on our ‘host’ computer and it comes complete with all of the Python libraries and other tools that you’ll need to complete the module (and a good deal more besides!). Installing the image will take a while as it’s quite large (2-5GB) and so will depend on the speed of your internet connection.\n\nIntel Macs and WindowsSilicon/M-Chip Macs\n\n\nIf your Apple computer has an Intel chipset (see:  -&gt; About this Mac -&gt; Processor) or is running Windows:\ndocker pull jreades/sds:2024\n\n\nIf your Apple computer has an M1 or M2 ‘Silicon’ chipset (see:  -&gt; About this Mac -&gt; Processor):\ndocker pull jreades/sds:2024-silicon"
  },
  {
    "objectID": "docker/index.html#using",
    "href": "docker/index.html#using",
    "title": "Using Docker",
    "section": "Using sds2024",
    "text": "Using sds2024\nNow that you have the image downloaded, you can start an sds2024 container by copying the following command into the Terminal or Power Shell (this does not work in the Command Prompt/cmd):\n\nFor Intel MacsFor M-Chip MacsFor Windows\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sds:2024 start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 \\\n   -v \"$(pwd):/home/jovyan/work\" \\\n  jreades/sds:2024-silicon start.sh jupyter lab \\\n  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''\n\n\ndocker run --rm -d --name sds2024 -p 8888:8888 -v \"$(pwd):/home/jovyan/work\" jreades/sds:2024 start.sh jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''"
  },
  {
    "objectID": "docker/index.html#dealing-with-errors",
    "href": "docker/index.html#dealing-with-errors",
    "title": "Using Docker",
    "section": "Dealing with Errors",
    "text": "Dealing with Errors\nBefore we go any further, there are two types of problems that you’re likely to encounter when trying to use Docker:\n\nErrors installing Docker\nErrors running Docker\n\n\nErrors Installing Docker\nMost installation errors arise from either your Windows machine not having WSL2 installed or not having enough disk space. An additional problem arises if you are using a ‘corporate’ laptop that has been locked down by your IT department and can’t install Docker because you’re not an administrator.\n\nProblems with WSL2\nIf you are unable to finish installing Docker because it is asking you to install WSL2, or telling you that WSL2 is not up-to-date but failing to update it for you, then you may wish to try using Hyper-V instead. This is not recommended but it is a workaround that has worked for some people.\nMicrosoft has instructions here on how to enable Hyper-V on your Windows machine. You will need to restart your computer after enabling Hyper-V. These instructions may also help.\n\n\nProblems with Admin Rights\nIf you are unable to install Docker on your computer (e.g. because you are an apprentice with a corporate laptop), you may wish to try using Podman instead. Podman is runs in ‘user space’, which means that it does not need admin rights to run. You can find out more about Podman here. Our limited testing suggests that it works well with the SDS environment.\nYou will need to:\n\nDownload and install the Podman CLI and Desktop from here.\nRun the following command in the PowerShell or Terminal: podman machine initpodman machine start\nAnd then run this command in PowerShell or Terminal to download the SDS image with podman pull jreades/sds:2024 (adding -silicon for M-chip Macs)\n\n\n\nProblems with Disk Space\nSome Windows PCs (especially those sold with Windows10) have two drives (C and D) and the C drive may fill up very quickly once you start installing and running software or processing data. In that case you may want to store your Docker images on the D drive. This is a complex process, and there is a separate page to try to talk you through the process. You may need assistance with this.\n\n\n\nErrors Running Docker\nYou may find that, at some point, Docker begins to complain about not having enough disk space. This is because it is storing all of the images and containers that you have downloaded and run. You can see how much space Docker is using by running the following command in the Power Shell or Terminal:\ndocker system df\n\nDeleting an Image\nIf you are short on disk space and wish to remove the image and container from your system completely at the end of Term 1 then the following approaches are available:\n\nDeleting by Filter\nThis should be used with some care since it will try to delete all matching images and this may not be what you want:\ndocker ps -aqf \"name=sds\" --format=\"{{.Image}} {{.Names}} {{.ID}}\" | grep \"2019\" | cut -d' ' -f3 | xargs docker rm -f\ndocker images --format=\"{{.Repository}} {{.Tag}} {{.ID}}\" | grep \"sds\" | cut -d' ' -f3 | xargs docker rmi\n\n\nDeleting by Image\ndocker ps -aq # Get list of running processes and work out container IDs to remove\ndocker rm -f &lt;list of container IDs&gt;\ndocker images # Get list of available images and work out image IDs to remove\ndocker rmi -f &lt;list of image IDs&gt;"
  },
  {
    "objectID": "docker/index.html#success",
    "href": "docker/index.html#success",
    "title": "Using Docker",
    "section": "Success!",
    "text": "Success!\nHowever, most of you should now be able to connect to the virtual machine by pointing your browser at: localhost:8888 where you should see something like this:\n\n\n\nJupyter Lab Success"
  },
  {
    "objectID": "docker/index.html#advanced-topics",
    "href": "docker/index.html#advanced-topics",
    "title": "Using Docker",
    "section": "Advanced Topics",
    "text": "Advanced Topics\nFor more about how to get the most out of Docker, see the Advanced Topics page."
  },
  {
    "objectID": "docker/index.html#footnotes",
    "href": "docker/index.html#footnotes",
    "title": "Using Docker",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA virtual machine is just a computer that runs on your computer. So it ‘borrows’ resources like hard drive space, memory, and processor in order to behave like an independent computer that you can interact with in various ways.↩︎\nA container is the name Docker uses to refer to a running virtual machine. The image on its own does nothing until you tell docker to run it, at which point it becomes a container!↩︎"
  }
]